{
    "test_suite_name": "query_state",
    "tag": "smoke",
    "test_suite_config":{
        "setup": {
        "statements": [
            
            ]
        },
        "tests_2_run": {"ids_2_run": ["all"], "tags_2_run":[], "tags_2_skip":{"default":["todo", "to_support", "change", "bug", "sample"],"cluster": ["view", "cluster_table_bug"]}}
    },
    "comments": "Tests covering query state checkpointing smoke test cases",
    "tests": [
        {
            "id": 0,
            "tags": ["query_state"],
            "name": "tail",
            "description": "tail state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1900", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select i, s from state_stream settings seek_to='earliest', checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":1900, "query": "insert into state_stream(i, s) values (1, 's1')"},
                        {"client":"python", "query_type": "table",  "kill":"1900", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s) values (2, 's2')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1900'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1900",
                    "expected_results":[
                        [1, "s1"], [2, "s2"]
                    ]
                }
            ]
        },
        {
            "id": 1,
            "tags": ["tail"],
            "name": "recover-from",
            "description": "recover tail query from a checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1901", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select i, s from state_stream settings seek_to='earliest', checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":1901, "query": "insert into state_stream(i, s) values (1, 's1')"},
                        {"client":"python", "query_type": "table",  "kill":"1901", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s) values (2, 's2')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(i, s) values (3, 's3')"},
                        {"client":"python", "query_type": "stream","query_id":"1901-1", "terminate": "manual","wait":2, "query":"recover from '1901'"},
                        {"client":"python", "query_type": "table", "depends_on":"1901", "wait":3, "query": "kill query where query_id='1901' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1901'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1901",
                    "expected_results":[
                        [1, "s1"], [2, "s2"]
                    ]
                },
                {
                    "query_id":"1901-1",
                    "expected_results":[
                        [3, "s3"]
                    ]
                }
            ]
        },
        {
            "id": 2,
            "tags": ["tail"],
            "name": "recover-from-unsubscribed",
            "description": "recover from an unsubscribed query shall fail",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1902", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select i, s from state_stream settings seek_to='earliest', checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":1902, "query": "insert into state_stream(i, s) values (1, 's1')"},
                        {"client":"python", "query_type": "table",  "kill":"1902", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s) values (2, 's2')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(i, s) values (3, 's3')"},
                        {"client":"python", "query_type": "stream","query_id":"1902-1", "terminate": "manual","wait":1, "query":"recover from '1902'"},
                        {"client":"python", "query_type": "table", "depends_on":"1902", "wait":3, "query": "kill query where query_id='1902' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1902'"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python","query_id":"1902-2", "query_end_timer":2, "query_type": "stream", "query":"recover from '1902'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1902",
                    "expected_results":[
                        [1, "s1"], [2, "s2"]
                    ]
                },
                {
                "query_id":"1902-1",
                "expected_results":[
                        [3, "s3"]
                    ]
                },
                {
                    "query_id":"1902-2",
                    "expected_results": []
                }
            ]
        },
        {
            "id": 3,
            "tags": ["tail"],
            "name": "recover-from-non-exists",
            "description": "recover from a non-exists query shall fail",
            "steps":[
                {
                    "statements": [
                        {"client":"python","query_id":"1903", "depends_on_stream":"state_stream","query_end_timer":2, "query_type": "stream", "query":"recover from '19000'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1903",
                    "expected_results": "error_code:2003"
                }
            ]
        },
        {
            "id": 4,
            "tags": ["query_state"],
            "name": "global_aggr_without_group_by",
            "description": "global aggregation state checkpoint without group by",
            "steps":[
                {
                "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1904", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select count(), sum(i), avg(i), min(i), max(i), min(s), max(s) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table","depends_on":1904, "kill":"1904", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1904'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1904",
                    "expected_results":[
                        [3, 6, 2, 1, 3, "s1", "s3"]
                    ]
                }
            ]
        },
        {
            "id": 5,
            "tags": ["query_state"],
            "name": "recover_global_aggr_without_group_by",
            "description": "recover global aggregation state checkpoint without group by",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1905", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select count(), sum(i), avg(i), min(i), max(i), min(s), max(s) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":1905, "kill":"1905", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(i, s) values (6, 's4')"},
                        {"client":"python", "query_type": "stream","query_id":"1905-1", "terminate": "manual","wait":1, "query":"recover from '1905'"},
                        {"client":"python", "query_type": "table", "depends_on":"1905", "wait":3, "query": "kill query where query_id='1905' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1905'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1905",
                    "expected_results":[
                        [3, 6, 2, 1, 3, "s1", "s3"]
                    ]
                },
                {
                    "query_id":"1905-1",
                    "expected_results":[
                        [4, 12, 3, 1, 6, "s1", "s4"]
                    ]
                }
            ]
        },
        {
            "id": 6,
            "tags": ["query_state"],
            "name": "global_aggr_with_group_by",
            "description": "global aggregation state checkpoint with group by",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1906", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select count(), sum(i), avg(i), min(i), max(i), min(s), max(s) from state_stream group by s emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table","depends_on":1906, "kill":"1906", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s) values (1, 's1'), (2, 's1'), (3, 's1')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1906'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1906",
                    "expected_results":[
                        [3, 6, 2, 1, 3, "s1", "s1"]
                    ]
                }
            ]
        },
        {
            "id": 7,
            "tags": ["query_state"],
            "name": "recover_global_aggr_with_group_by",
            "description": "recover global aggregation state checkpoint with group by",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1907", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select count(), sum(i), avg(i), min(i), max(i), min(s), max(s) from state_stream group by s emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table","depends_on":1907, "kill":"1907", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s) values (1, 's1'), (2, 's1'), (3, 's1')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(i, s) values (6, 's1')"},
                        {"client":"python", "query_type": "stream","query_id":"1907-1", "terminate": "manual","wait":1, "query":"recover from '1907'"},
                        {"client":"python", "query_type": "table", "depends_on":"1907", "wait":3, "query": "kill query where query_id='1907' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1907'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1907",
                    "expected_results":[
                        [3, 6, 2, 1, 3, "s1", "s1"]
                    ]
                },
                {
                    "query_id":"1907-1",
                    "expected_results":[
                        [4, 12, 3, 1, 6, "s1", "s1"]
                    ]
                }
            ]
        },
        {
            "id": 8,
            "tags": ["query_state"],
            "name": "tumble_window_aggr",
            "description": "tumble window aggregation state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1908", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select count(), sum(i), avg(i), min(i), max(i), min(s), max(s) from tumble(state_stream, 2s) group by window_start settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table","depends_on":1908, "kill":"1908", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s, _tp_time) values (1, 's1', '2022-01-01 00:00:00'), (3, 's2', '2022-01-01 00:00:01'), (4, 's3', '2022-01-01 00:00:02')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1908'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1908",
                    "expected_results":[
                        [2, 4, 2, 1, 3, "s1", "s2"]
                    ]
                }
            ]
        },
        {
            "id": 9,
            "tags": ["query_state"],
            "name": "recover_tumble_window_aggr",
            "description": "recover tumble window aggregation state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream if not exists state_stream(i int, s string)"},
                        {"client":"python", "query_type": "stream", "query_id":"1909", "depends_on_stream":"state_stream", "wait":1, "terminate": "manual", "query":"subscribe to select count(), sum(i), avg(i), min(i), max(i), min(s), max(s) from tumble(state_stream, 2s) group by window_start settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table","depends_on":1909, "kill":"1909", "kill_wait":3, "wait":1, "query": "insert into state_stream(i, s, _tp_time) values (1, 's1', '2022-01-01 00:00:00'), (3, 's2', '2022-01-01 00:00:01'), (4, 's3', '2022-01-01 00:00:02')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(i, s, _tp_time) values (6, 's4', '2022-01-01 00:00:03'), (7, 'wont appear in result', '2022-01-01 00:00:04')"},
                        {"client":"python", "query_type": "stream","query_id":"1909-1", "terminate": "manual","wait":1, "query":"recover from '1909'"},
                        {"client":"python", "query_type": "table", "depends_on":"1909", "wait":3, "query": "kill query where query_id='1909' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1909'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1909",
                    "expected_results":[
                        [2, 4, 2, 1, 3, "s1", "s2"]
                    ]
                },
                {
                    "query_id":"1909-1",
                    "expected_results":[
                        [2, 10, 5, 4, 6, "s3", "s4"]
                    ]
                }
            ]
        },
        {
            "id": 10,
            "tags": ["query_state"],
            "name": "global_aggr_with_fun_count_distinct",
            "description": "global aggregation with function count_distinct state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1910", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select count_distinct(id) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1910", "kill":"1910", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1910'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1910",
                    "expected_results":[
                        ["2"]
                    ]
                }
            ]
        },
        {
            "id": 11,
            "tags": ["query_state"],
            "name": "recover_global_aggr_with_fun_count_distinct",
            "description": "recover global aggregation with function count_distinct from a state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1911", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select count_distinct(id) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1911", "kill":"1911", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev2', 'ca', 80, '2020-02-02 20:00:05'), ('dev8', 'ca', 67, '2020-02-02 20:00:07'), ('dev8', 'ca', 77, '2020-02-02 20:00:09')"},  
                        {"client":"python", "query_type": "stream","query_id":"1911-1", "terminate": "manual","wait":3, "query":"recover from '1911'"},
                        {"client":"python", "query_type": "table", "depends_on":"1911", "wait":1, "query": "kill query where query_id='1911' sync"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1911'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1911",
                    "expected_results":[
                        ["2"]
                    ]
                },
                {
                    "query_id":"1911-1",
                    "expected_results":[
                        ["3"]
                    ]
                }
            ]
        },
        {
            "id": 12,
            "tags": ["query_state"],
            "name": "global_aggr_with_fun_count_if",
            "description": "global aggregation with function count_if state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1912", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select count_if(value > 58) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1912", "kill":"1912", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1912'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1912",
                    "expected_results":[
                        ["2"]
                    ]
                }
            ]
        },
        {
            "id": 13,
            "tags": ["query_state"],
            "name": "recover_global_aggr_with_fun_count_if",
            "description": "recover global aggregation with function count_if from a state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1913", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select count_if(value > 58) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1913", "kill":"1913", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev2', 'ca', 80, '2020-02-02 20:00:05'), ('dev8', 'ca', 55, '2020-02-02 20:00:07'), ('dev8', 'ca', 77, '2020-02-02 20:00:09')"},  
                        {"client":"python", "query_type": "stream","query_id":"1913-1", "terminate": "manual","wait":3, "query":"recover from '1913'"},
                        {"client":"python", "query_type": "table", "depends_on":"1913", "wait":1, "query": "kill query where query_id='1913' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1913'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1913",
                    "expected_results":[
                        ["2"]
                    ]
                },
                {
                    "query_id":"1913-1",
                    "expected_results":[
                        ["4"]
                    ]
                }
            ]
        },
        {
            "id": 14,
            "tags": ["query_state"],
            "name": "global_aggr_with_fun_distinct",
            "description": "global aggregation with function distinct state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1914", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select distinct(id) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1914", "kill":"1914", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1914'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1914",
                    "expected_results":[
                        ["dev1"],
                        ["dev2"]
                    ]
                }
            ]
        },
        {
            "id": 15,
            "tags": ["query_state"],
            "name": "recover_global_aggr_with_fun_distinct",
            "description": "recover global aggregation with function distinct from a state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1915", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select distinct(id) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1915", "kill":"1915", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev2', 'ca', 80, '2020-02-02 20:00:05'), ('dev8', 'ca', 55, '2020-02-02 20:00:07'), ('dev8', 'ca', 77, '2020-02-02 20:00:09')"},  
                        {"client":"python", "query_type": "stream","query_id":"1915-1", "terminate": "manual","wait":3, "query":"recover from '1915'"},
                        {"client":"python", "query_type": "table", "depends_on":"1915", "wait":1, "query": "kill query where query_id='1915' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1915'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1915",
                    "expected_results":[
                        ["dev1"],
                        ["dev2"]
                    ]
                },
                {
                    "query_id":"1915-1",
                    "expected_results":[
                        ["dev8"]
                    ]
                }
            ]
        },
        {
            "id": 16,
            "tags": ["query_state"],
            "name": "global_aggr_with_fun_unique",
            "description": "global aggregation with function unique state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1916", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select unique(id) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1916", "kill":"1916", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1916'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1916",
                    "expected_results":[
                        ["2"]
                    ]
                }
            ]
        },
        {
            "id": 17,
            "tags": ["query_state"],
            "name": "recover_global_aggr_with_fun_unique",
            "description": "recover global aggregation with function unique from a state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1917", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select unique(id) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1917", "kill":"1917", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev2', 'ca', 80, '2020-02-02 20:00:05'), ('dev8', 'ca', 55, '2020-02-02 20:00:07'), ('dev8', 'ca', 77, '2020-02-02 20:00:09')"},  
                        {"client":"python", "query_type": "stream","query_id":"1917-1", "terminate": "manual","wait":3, "query":"recover from '1917'"},
                        {"client":"python", "query_type": "table", "depends_on":"1917", "wait":1, "query": "kill query where query_id='1917' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1917'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1917",
                    "expected_results":[
                        ["2"]
                    ]
                },
                {
                    "query_id":"1917-1",
                    "expected_results":[
                        ["3"]
                    ]
                }
            ]
        },
        {
            "id": 18,
            "tags": ["query_state"],
            "name": "global_aggr_with_fun_unique_exact",
            "description": "global aggregation with function unique_exact state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1918", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select unique_exact(id) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1918", "kill":"1918", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1918'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1918",
                    "expected_results":[
                        ["2"]
                    ]
                }
            ]
        },
        {
            "id": 19,
            "tags": ["query_state"],
            "name": "recover_global_aggr_with_fun_unique_exact",
            "description": "recover global aggregation with function unique_exact from a state checkpoint",
            "steps":[
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "query":"drop stream if exists state_stream"},
                        {"client":"python", "query_type": "table", "exist":"state_stream", "exist_wait":2, "wait":1, "query":"create stream state_stream (id string, location string, value float, timestamp datetime64(3) default now64(3))"}, 
                        {"client":"python", "query_type": "stream", "query_id":"1919", "depends_on_stream":"state_stream", "wait":1, "terminate":"manuel", "query":"subscribe to select unique_exact(id) from state_stream emit periodic 1s settings checkpoint_interval=1"},
                        {"client":"python", "query_type": "table", "depends_on":"1919", "kill":"1919", "kill_wait":3, "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev1', 'ca', 57.3, '2020-02-02 20:00:00'), ('dev1', 'ca', 66, '2020-02-02 20:00:01'), ('dev2', 'ca', 58.3, '2020-02-02 20:00:03')"}
                    ]
                },
                {
                    "statements": [
                        {"client":"python", "query_type": "table", "wait":1, "query": "insert into state_stream(id, location, value, timestamp) values ('dev2', 'ca', 80, '2020-02-02 20:00:05'), ('dev8', 'ca', 55, '2020-02-02 20:00:07'), ('dev8', 'ca', 77, '2020-02-02 20:00:09')"},  
                        {"client":"python", "query_type": "stream","query_id":"1919-1", "terminate": "manual","wait":3, "query":"recover from '1919'"},
                        {"client":"python", "query_type": "table", "depends_on":"1919", "wait":1, "query": "kill query where query_id='1919' sync"},
                        {"client":"python", "query_type": "table", "wait":1, "query":"unsubscribe to '1919'"}
                    ]
                }
            ],
            "expected_results": [
                {
                    "query_id":"1919",
                    "expected_results":[
                        ["2"]
                    ]
                },
                {
                    "query_id":"1919-1",
                    "expected_results":[
                        ["3"]
                    ]
                }
            ]
        }
    ]
}
