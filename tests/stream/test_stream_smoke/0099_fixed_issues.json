{
  "test_suite_name": "fixed_issues",
  "tag": "smoke",

  "test_suite_config":{
    "tests_2_run": {"ids_2_run": ["all"], "tags_2_run":[], "tags_2_skip":{"default":["todo", "to_support", "change", "bug", "sample"],"cluster": ["view", "cluster_table_bug"]}}
  },
  "comments": "Tests covering fixed issues smoke cases.",
  "tests": [
    {
      "id": 0,
      "tags": ["materialized view"],
      "name": "#1288",
      "description": "create materialized view over materialized view with last emit",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query":"drop view if exists mv_2"},
            {"client":"python", "query_type": "table", "wait":2, "query":"drop view if exists mv_1"},
            {"client":"python", "query_type": "table", "wait":2, "query":"drop view if exists mv_truck_track"},
            {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists ttp_truck_track"},
            {"client":"python", "query_type": "table", "wait":2, "query_id":"9900", "query": "create stream ttp_truck_track(`lpn` string, `vno` string, `drc` string, `drcCode` int32, `wgs84Lat` float32, `wgs84Lon` float32, `gcj02Lat` float32, `gcj02Lon` float32, `province` nullable(string), `city` nullable(string), `country` nullable(string), `spd` float32, `mil` float32, `time` string, `adr` string)"},
            {"client":"python", "query_type": "table", "wait":5, "query_id":"9901","depends_on_stream":"ttp_truck_track", "query": "create materialized view mv_truck_track as (select * from ttp_truck_track where date_diff('second', _tp_time, now()) < 30)"},
            {"client":"python", "query_type": "table", "wait":5, "query_id":"9902", "depends_on_stream":"mv_truck_track", "query": "create materialized view if not exists mv_1 as (select now() as time, count_distinct(lpn) as cnt from mv_truck_track emit last 10m and periodic 10s)"},
            {"client":"python", "query_type": "table", "wait":5, "query_id":"9903", "depends_on_stream":"mv_truck_track","drop_view":"mv_2,mv_1,mv_truck_track", "drop_view_wait":2, "query": "create materialized view if not exists mv_2 as (select now() as time, count_distinct(lpn) as cnt from mv_truck_track emit last 10m and periodic 10s)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[]},
        {"query_id":"9901", "expected_results":[]},
        {"query_id":"9902", "expected_results":[]},
        {"query_id":"9903", "expected_results":[]}
      ]
    },
    {
      "id": 1,
      "tags": ["substream"],
      "name": "#1295",
      "description": "substream watermark and garbage collection",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists test_substream_1"},
            {"client":"python", "query_type": "table", "wait":2, "query":"create stream test_substream_1(i int, s string)"},
            {"client":"python", "query_id":"9900", "terminate": "manual", "query_type": "stream", "depends_on_stream":"test_substream_1", "query":"select s, count(*), max(i) from tumble(test_substream_1, 2s) partition by s group by window_start, s"},
            {"client":"python", "query_type": "table", "depends_on": 9900, "wait":2, "query": "insert into test_substream_1(i, s) values (1, 'a'), (2, 'b')"},
            {"client":"python", "query_type": "table", "wait":3, "query": "insert into test_substream_1(i, s) values (1, 'a'), (2, 'b')"},
            {"client":"python", "query_type": "table", "wait":3, "query": "insert into test_substream_1(i, s) values (1, 'a'), (2, 'b')"},
            {"client":"python", "wait": 2, "run_mode":"table", "query_type": "table", "query":"kill query where query_id = '9900'"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          ["a", 1, 1],
          ["b", 1, 2],
          ["a", 1, 1],
          ["b", 1, 2]
        ]}
      ]
    },
    {
      "id": 2,
      "tags": ["substream"],
      "name": "#1395",
      "description": "rewrited aggregate function with substream",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists test_substream_1"},
            {"client":"python", "query_type": "table", "wait":5, "query":"create stream test_substream_1(id int, value int)"},
            {"client":"python", "query_id":"9900", "terminate": "manual", "query_type": "stream", "wait":1, "depends_on_stream":"test_substream_1", "query":"select id, min_k(value, 1), max_k(value, 1), top_k(value, 1) from test_substream_1 partition by id order by id limit 2"},
            {"client":"python", "query_type": "table", "depends_on": 9900,"wait":2, "query": "insert into test_substream_1(id, value) values (1, 1), (2, 2), (2, 1), (1, 2), (2, 1), (1, 2)"},
            {"client":"python", "query_type": "table", "query_id":"9901", "wait":2, "query":"select id, min_k(value, 1), max_k(value, 1), top_k(value, 1) from table(test_substream_1) partition by id group by id order by id"},
            {"client":"python", "wait": 5, "run_mode":"table", "query_type": "table", "query":"kill query where query_id = '9900'"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, "[1]", "[2]", "[(2, 2)]"],
          [2, "[1]", "[2]", "[(1, 2)]"]
        ]},
        {"query_id":"9901", "expected_results":[
          [1, "[1]", "[2]", "[(2, 2)]"],
          [2, "[1]", "[2]", "[(1, 2)]"]
        ]}
      ]
    },
    {
      "id": 3,
      "tags": ["rename"],
      "name": "#1445",
      "description": "[parser] fix rename function failure(example: maxIf to max_if)",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_rename_fail_stream"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_rename_fail_stream(student_name string, subject string, score int)"},
            {"client":"python", "query_type": "table", "wait":2, "query": "insert into test_rename_fail_stream(student_name, subject, score) values ('Marc','Math', 60),('Marc','Science', 70),('Marcus', 'Math', 80),('Marcus', 'Science', 90)"},
            {"client":"python", "query_type": "table", "query_id":"9900", "wait":2, "query":"select max(score) filter(where subject = 'Math')as  max_math_score, avg(score) filter (where subject = 'Science') as avg_science_score from table(test_rename_fail_stream)"},
            {"client":"python", "query_type": "table", "query_id":"9901", "wait":2, "query":"select min(score) filter(where subject = 'Math')as  min_math_score, sum(score) filter (where subject = 'Science') as sum_science_score from table(test_rename_fail_stream)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          ["80", "80.0"]
        ]},
        {"query_id":"9901", "expected_results":[
          ["60", "160"]
        ]}
      ]
    },
    {
      "id": 4,
      "tags": ["count_if(*)"],
      "name": "#1476",
      "description": "fix count_if function with argument *",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists count_if_with_AsteriskArguement"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream count_if_with_AsteriskArguement(age int,name string)"},
            {"client":"python", "query_type": "table", "wait":2, "query": "insert into count_if_with_AsteriskArguement(age,name) values(20,'lrx'),(18,'yl')"},
            {"client":"python", "query_type": "table", "query_id":"9900", "wait":2, "query":"select count(),count(*) filter(where name='lrx') from table(count_if_with_AsteriskArguement)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          ["2", "1"]
        ]}
      ]
    },
    {
      "id": 5,
      "tags": ["materialized view"],
      "name": "#1934",
      "description": "materialized view support virtual columns like to a stream",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop view if exists test_mv_1934"},
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_stream_1934"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_1934(value int)"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_stream_1934", "query": "create materialized view test_mv_1934 as select count() from test_stream_1934"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_mv_1934", "wait":2, "query": "insert into test_stream_1934(value) values(1)"},
            {"client":"python", "query_type": "table", "wait":3, "query": "insert into test_stream_1934(value) values(2)"},
            {"client":"python", "query_type": "table", "wait":3, "query": "insert into test_stream_1934(value) values(3)"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "query_end_timer":3, "query":"select `count()`, _tp_shard, _tp_sn from test_mv_1934 where _tp_sn >= 0"},
            {"client":"python", "query_type": "stream", "query_id":"9901", "query_end_timer":3,"drop_view":"test_mv_1934", "drop_view_wait":2, "query":"select `count()`, _tp_shard, _tp_sn from test_mv_1934 where _tp_time >= now() - 1m"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[
          [1, 0, 0], [2, 0, 1], [3, 0, 2]
        ]},
        {"query_id":"9901", "expected_results":[
          [1, 0, 0], [2, 0, 1], [3, 0, 2]
        ]}
      ]
    },
    {
      "id": 6,
      "tags": ["emit interval"],
      "name": "#2105",
      "description": "limit the max emit interval is day",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_stream_2105"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_2105(value int)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9900", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1ns"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9901", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1us"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9902", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1ms"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9903", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1s"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9904", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1m"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9905", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1h"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9906", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1d"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9907", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1w"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9908", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1M"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9909", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1q"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2105", "wait":3, "query_id":"9910", "query_end_timer":3, "query":"select count() from test_stream_2105 emit periodic 1y"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[]},
        {"query_id":"9901", "expected_results":[]},
        {"query_id":"9902", "expected_results":[]},
        {"query_id":"9903", "expected_results":[]},
        {"query_id":"9904", "expected_results":[]},
        {"query_id":"9905", "expected_results":[]},
        {"query_id":"9906", "expected_results":[]},
        {"query_id":"9907", "expected_results":"error_code:43"},
        {"query_id":"9908", "expected_results":"error_code:43"},
        {"query_id":"9909", "expected_results":"error_code:43"},
        {"query_id":"9910", "expected_results":"error_code:43"}
      ]
    },
    {
      "id": 7,
      "tags": ["join", "union"],
      "name": "#2229",
      "description": "streaming join with union query",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_2229"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_2229(i int)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2229", "wait":1, "query_id":"9900", "query":"with cte as (select * from test_stream_2229 union select * from test_stream_2229) select i from test_stream_2229 join cte using(i)"},
            {"client":"python", "query_type": "table", "depends_on_stream":"test_stream_2229", "wait":4, "kill": 9900, "kill_wait":2, "query": "insert into test_stream_2229(i) values(1)(2)(3)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[[1],[2],[3],[1],[2],[3]]}
      ]
    },
    {
      "id": 8,
      "tags": ["last x"],
      "name": "#2556",
      "description": "stremaing hop query with last x",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_stream_2556"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_2556(i int)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2556", "wait":3, "query_id":"9900", "query_end_timer":3, "query":"select count() from test_stream_2556 emit last 6m"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2556", "wait":3, "query_id":"9901", "query_end_timer":3, "query": "select count() from test_stream_2556 emit last 2000s"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2556", "wait":3, "query_id":"9902", "query_end_timer":3, "query": "select count() from test_stream_2556 emit last 1h"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[]},
        {"query_id":"9901", "expected_results":[]},
        {"query_id":"9902", "expected_results":"error_code:62"}
      ]
    },
    {
      "id": 9,
      "tags": ["tumble window over table function query"],
      "name": "#2513",
      "description": "stremaing hop query with last x",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists test_stream_2513"},
            {"client":"python", "query_type": "table", "wait":2, "query": "create stream test_stream_2513(i int, s string)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2513", "wait":3, "query_id":"9900", "query_end_timer":3, "query":"with cte as (select i, s, _tp_time as event_time from test_stream_2513) select window_start, window_end from tumble(table(cte), _tp_time, 2s)"},
            {"client":"python", "query_type": "stream", "depends_on_stream":"test_stream_2513", "wait":3, "query_id":"9901", "query_end_timer":3, "query":"with cte as (select i, s, _tp_time from test_stream_2513) select window_start, window_end from tumble(table(cte), _tp_time, 2s)"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":"error_code:47"},
        {"query_id":"9901", "expected_results":[]}
      ]
    },
    {
      "id": 10,
      "tags": ["global aggr"],
      "name": "#2900",
      "description": "global aggr group by window_start/window_end",
      "steps":[
        {
          "statements": [
            {"client":"python", "query_type": "table", "query": "drop stream if exists test_stream_2900"},
            {"client":"python", "query_type": "table", "exist": "test_stream_2900", "exist_wait":2, "wait":1, "query": "create stream test_stream_2900 (auction int64, bidder int64, channel string, price int64, url string, dateTime datetime64(3), extra string, _tp_time datetime64(3) default dateTime)"},
            {"client":"python", "query_type": "stream", "query_id":"9900", "depends_on_stream":"test_stream_2900", "wait":1, "query_end_timer":3, "query":"with data as(select * from test_stream_2900 where _tp_time >= earliest_ts() limit 100000000) SELECT AuctionBids.auction, AuctionBids.num FROM (SELECT B1.auction, count(*) AS num, window_start, window_end FROM hop(data, _tp_time, INTERVAL 2 SECOND, INTERVAL 10 SECOND) as B1 GROUP BY B1.auction, window_start, window_end) AS AuctionBids JOIN (SELECT max(CountBids.num) AS maxn, CountBids.window_start, CountBids.window_end FROM ( SELECT count(*) AS num, window_start, window_end FROM hop(data, _tp_time, INTERVAL 2 SECOND, INTERVAL 10 SECOND) as B2 GROUP BY B2.auction, window_start, window_end) AS CountBids GROUP BY CountBids.window_start, CountBids.window_end) AS MaxBids ON AuctionBids.window_start = MaxBids.window_start AND AuctionBids.window_end = MaxBids.window_end where AuctionBids.num >= MaxBids.maxn"}
          ]
        }
      ],
      "expected_results": [
        {"query_id":"9900", "expected_results":[]}
      ]
    }
  ]
}