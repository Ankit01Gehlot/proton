{
    "test_suite_name": "type_and_func",
    "test_suite_config":{
        "tests_2_run": {"ids_2_run": ["all"], "tags_2_run":[], "tags_2_skip":{"default":["todo", "to_support", "change", "bug", "sample"],"cluster": ["view", "cluster_table_bug"]}}
    },
    "commments":
        "Tests covering the steam query smoke cases.",
    "tests": [

        {
            "id": 0,
            "tags": ["type"],
            "name": "default type in one table and injest",
            "description": "create a stream test_type, 1 column for 1 type and ingest data with same or different column sequence of show create",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists test_type"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream test_type (uuid uuid, int int, uint uint8, string string, float float, decimal decimal32(3), date date, datetime datetime, enum enum('a'=1, 'b'=2, 'z'=26), tuple tuple(s string, i int), ipv4 ipv4, ipv6 ipv6, map map(string, int), nullable nullable(datetime64), timestamp datetime64(3) default now64(3))"},
                    {"client":"python", "query_type": "table", "depends_on_stream":"test_type", "wait":1, "query":"insert into test_type (uuid, int, uint, string, float, decimal, date, datetime, enum, tuple, ipv4, ipv6, map, nullable, timestamp) values ('4c6a2a19-4f9f-456f-b076-c43ef97255a7', -1234567, 1234567, '{@string}', 12345.123, 123456.123, to_date('2022-03-24'), to_datetime('2022-03-24 17:17:17'), 'a', ('a', 0), '192.168.168.168', '2a02:aa08:e000:3100::20', {'key1':111}, null ,'2020-01-01 11:11:11')"},
                    {"client":"python","query_id":"801", "query_end_timer":2, "query_type": "stream", "query":"select uuid, int, uint, string, float, decimal, date, datetime, enum, tuple, ipv4, ipv6, map, nullable from test_type settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["4c6a2a19-4f9f-456f-b076-c43ef97255a7", -1234567, 135, "{@string}", 12345.123, "123456.123", "2022-03-24", "2022-03-24 17:17:17", "a", "('a', 0)", "192.168.168.168", "2a02:aa08:e000:3100::20", "{'key1': 111}", "None"]]}
            ]
        },
        {
            "id": 1,
            "tags": ["type"],
            "name": "uint",
            "description": "create a stream t_unit with uint type and ingest, query",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "query":"drop stream if exists t_uint"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"create stream t_uint (uint uint)"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_uint (uint) values (123456)"},
                    {"client":"python","query_id":"801", "query_end_timer":2, "query_type": "stream", "query":"select  uint from t_uint settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                [123456]]}
            ]
        },
        {
            "id": 2,
            "tags": ["type", "bug"],
            "name": "decimal",
            "description": "create a stream t_decimal with decimal type and ingest, query",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists t_decimal"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"create stream t_decimal (decimal decimal(3))"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_uint (decimal) values (1234.123)"},
                    {"client":"python","query_id":"801", "query_end_timer":2, "query_type": "stream", "query":"select decimal from t_decimal settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1234.123"]]}
            ]
        },
        {
            "id": 3,
            "tags": ["type"],
            "name": "bool",
            "description": "create a stream t_bool with bool type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists t_bool"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_bool (bool bool)"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_bool (bool) values (true)"},
                    {"client":"python","query_id":"801", "query_end_timer":2, "query_type": "stream", "query":"select bool from t_bool settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["True"]]}
            ]
        },
        {
            "id": 4,
            "tags": ["type"],
            "name": "fixed_string",
            "description": "create a stream t_fixeds with fixed_string type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists t_fixeds"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_fixeds (fixeds fixed_string(32))"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_fixeds (fixeds) values ('{@fixed_string32}')"},
                    {"client":"python","query_id":"801", "query_end_timer":2, "query_type": "stream", "query":"select fixeds from t_fixeds settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["{@fixed_string32}"]]}
            ]
        },
        {
            "id": 5,
            "tags": ["type", "bug"],
            "name": "low_cardinality",
            "description": "create a stream t_lowcard with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop stream if exists t_lowcard"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_lowcard (lowcard low_cardinality(string))"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_lowcard (lowcard) values ('{@lowcardinalitystring}')"},
                    {"client":"python","query_id":"801", "query_end_timer":2, "query_type": "stream", "query":"select lowcard from t_lowcard settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["{@lowcardinalitystring}"]]}
            ]
        },
        {
            "id": 6,
            "tags": ["func"],
            "name": "latest()",
            "description": "create a stream t_lowcard with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop stream if exists t_latest"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_latest (name string, price int)"},
                    {"client":"python","query_id":"801", "query_end_timer":4, "query_type": "stream", "query":"select group_array(name) as names,group_array(latest_price) as prices,map_cast(names, prices) as name_prices, (name_prices['id1']/2 + name_prices['id2']/2) as comb_price from (select name,latest(price) as latest_price from t_latest group by name emit periodic 5s) limit 1"},
                    {"client":"python", "query_type": "table", "depends_on": 801, "wait":1, "query":"insert into t_latest (name, price) values ('id1', 100) ('id2', 200)"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_latest (name, price) values ('id1', 500) ('id2', 300)"},
                    {"client":"python", "query_type": "table", "wait":1, "query":"insert into t_latest (name, price) values ('id1', 300) ('id2', 1000)"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["['id2', 'id1']", "[1000, 300]", "{'id2': 1000, 'id1': 300}", "650"]]}
            ]
        },
        {
            "id": 7,
            "tags": ["func"],
            "name": "to_float on filed out of map",
            "description": "create a stream t_float_map with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop stream if exists t_float_map"},
                    {"client":"python", "query_type": "table","wait":2, "query":"create stream t_float_map (id string, value_str string)"},
                    {"client":"python","query_id":"801", "query_type": "stream","depends_on_stream":"t_float_map", "wait":1,"query_end_timer":4, "query":" select group_array(id) as ids, group_array(latest_value_str) as latest_value_strs, map_cast(ids, latest_value_strs) as id_value_strs, id_value_strs['a'] as id_value_a, to_float(id_value_a) from (select id, latest(value_str) as latest_value_str from t_float_map group by id order by id) limit 1"},
                    {"client":"python", "query_type": "table", "depends_on":801, "wait":3, "query":"insert into t_float_map (id, value_str) values ('a', '100.1')('b', '200.1')('c', '300.1')"}


                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["['a', 'b', 'c']", "['100.1', '200.1', '300.1']", "{'a': '100.1', 'b': '200.1', 'c': '300.1'}", "100.1", 100.1]]}
            ]
        },
        {
            "id": 8,
            "tags": ["emit_version"],
            "name": "to_float on filed out of map with emit version",
            "description": "create a stream t_float_map with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists float_map_view"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists t_float_map"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_float_map (id string, value_str string)"},
                    {"client":"python", "query_type": "stream", "depends_on_stream":"t_float_map", "query_id": "801","wait":1, "query_end_timer": 10, "query":"select emit_version(), group_array(id) as ids, group_array(latest_value_str) as latest_value_strs, map_cast(ids, latest_value_strs) as id_value_strs, id_value_strs['a'] as id_value_a, to_float(id_value_a) from (select id, latest(value_str) as latest_value_str from t_float_map group by id order by id) limit 1"},
                    {"client":"python", "query_type": "table", "wait":3,"depends_on":"801", "query":"insert into t_float_map (id, value_str) values ('a', '100.1') ('b', '200.1') ('c', '300.1')"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["0", "['a', 'b', 'c']", "['100.1', '200.1', '300.1']", "{'a': '100.1', 'b': '200.1', 'c': '300.1'}", "100.1", 100.1]
                ]}
            ]
        },
        {
            "id": 9,
            "tags": ["emit_version"],
            "name": "to_float on filed out of map with emit version as view",
            "description": "create a stream t_float_map with low_cardinality type and ingest, query, but of proton-python-driver",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists float_map_view"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop view if exists emit_version_view"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists t_float_map"},
                    {"client":"python", "query_type": "table","wait":5, "query":"create stream t_float_map (id string, value_str string)"},
                    {"client":"python", "query_type": "table", "depends_on_stream":"t_float_map","wait":1, "query":"create view if not exists emit_version_view as select emit_version(), group_array(id) as ids, group_array(latest_value_str) as latest_value_strs, map_cast(ids, latest_value_strs) as id_value_strs, id_value_strs['a'] as id_value_a, to_float(id_value_a) from (select id, latest(value_str) as latest_value_str from t_float_map group by id order by id)"},
                    {"client":"python", "query_type": "stream","depends_on_stream":"emit_version_view","wait":2, "query_id": "801", "query_end_timer": 10, "query":"select * from emit_version_view limit 1"},
                    {"client":"python", "query_type": "table", "wait":5,"depends_on":"801", "query":"insert into t_float_map (id, value_str) values ('a', '100.1') ('b', '200.1') ('c', '300.1')"},
                    {"client":"python", "query_type": "table", "wait":6, "query":"select 1"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["0", "['a', 'b', 'c']", "['100.1', '200.1', '300.1']", "{'a': '100.1', 'b': '200.1', 'c': '300.1'}", "100.1", 100.1]
                ]}
            ]
        },
        {
            "id": 10,
            "tags": ["emit_version"],
            "name": "emit verion on global aggre w/o group by",
            "description": "create a stream t_timeout, and create a view as a global query with emit timeout and check emit by timeout ",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop stream if exists t_emit_version"},
                    {"client":"python", "query_type": "table","wait":5, "query":"create stream t_emit_version(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "stream","depends_on_stream":"t_emit_version", "wait":1, "query_id": "801", "query_end_timer": 10,"query":"select emit_version(), count() from t_emit_version limit 1"},
                    {"client":"python", "query_type": "table", "wait":3,"depends_on":"801", "query":"insert into t_emit_version(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 20, '2020-01-01 00:00:00') (2, 20, '2020-01-01 00:00:00')(3, 20, '2020-01-01 00:00:00') (1, 30, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"},
                    {"client":"python", "query_type": "table", "wait":6, "query":"select 1"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["0", 8]
                ]}
            ]
        },
        {
            "id": 11,
            "tags": ["timeout"],
            "name": "emit timeout on as view",
            "description": "create a stream t_timeout, and create a view as a tumble query with emit timeout and check emit by timeout ",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop view if exists timeout_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_timeout"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_timeout(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "table", "wait":1,"depends_on_stream":"t_timeout", "query":"create materialized view if not exists timeout_v as select emit_version(), id, count() from  tumble(t_timeout, time, 5s) group by id, window_end emit timeout 5s"},
                    {"client":"python", "query_type": "stream","wait":5, "depends_on_stream":"timeout_v","query_id": "801", "query_end_timer": 11, "query":"select * EXCEPT (_tp_time) from timeout_v settings seek_to='earliest'"},
                    {"client":"python", "query_type": "table", "wait":1,"depends_on":"801", "query":"insert into t_timeout(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 20, '2020-01-01 00:00:00') (2, 20, '2020-01-01 00:00:00')(3, 20, '2020-01-01 00:00:00') (1, 30, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"},
                    {"client":"python", "query_type": "table", "wait":6, "query":"select 1"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["0", "3", 2],
                ["0", "2", 2],
                ["0", "1", 2],
                ["1", "1", 2]
                ]}
            ]
        },
        {
            "id": 12,
            "tags": ["dedup"],
            "name": "dedup on stream as view",
            "description": "create a stream t_dedup, and create a view with dedup, tumble on the view to check dedup",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists dedup_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_dedup"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_dedup(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "table", "wait":1, "depends_on_stream":"t_dedup","query":"create view if not exists dedup_v as select id, value, time, to_string(time) as time_string from dedup(t_dedup, id, value, to_string(time))"},
                    {"client":"python", "query_type": "stream","wait":1, "query_id": "801", "query_end_timer": 11, "query":"select emit_version(), id, count() from tumble(dedup_v, time, 5s) group by id, window_end"},
                    {"client":"python", "query_type": "table", "wait":2,"depends_on":"801", "query":"insert into t_dedup(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:00') (2, 10, '2020-01-01 00:00:00')(3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["0", "3", 1],
                ["0", "2", 1],
                ["0", "1", 1]
                ]}
            ]
        },
        {
            "id": 13,
            "tags": ["dedup", "bug"],
            "name": "dedup on stream by calculated field as key as view",
            "description": "create a stream t_dedup, and create a view with dedup on key with calculated alias field and check dedup ",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1,"query":"drop view if exists dedup_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_dedup"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_dedup(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_dedup", "wait":1, "query":"create view if not exists dedup_v as select id, value, time, to_string(time) as time_string from dedup(t_dedup, id, value, time_string)"},
                    {"client":"python", "query_type": "stream","wait":1, "query_id": "801", "query_end_timer": 11, "query":"select emit_version(), id, count() from tumble(dedup_v, time, 5s) group by id, window_end"},
                    {"client":"python", "query_type": "table", "wait":1,"depends_on":"801", "query":"insert into t_dedup(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:00') (2, 10, '2020-01-01 00:00:00')(3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["0", "3", 1],
                ["0", "2", 1],
                ["0", "1", 1]
                ]}
            ]
        },
        {
            "id": 14,
            "tags": ["dedup", "cluster_table_bug"],
            "name": "dedup on table as view",
            "description": "create a stream t_dedup, and create a view with dedup on key with func as to_string(time) and check dedup ",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists dedup_v"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists t_dedup"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_dedup(id int, value int, time datetime64(3,'UTC'))"},
                    {"client":"python", "query_type": "table", "wait":1,"depends_on_stream":"t_dedup", "query":"insert into t_dedup(id, value, time)values(1, 10, '2020-01-01 00:00:00')(2, 10, '2020-01-01 00:00:00') (3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:00') (2, 10, '2020-01-01 00:00:00')(3, 10, '2020-01-01 00:00:00') (1, 10, '2020-01-01 00:00:05')(1, 10, '2020-01-01 00:00:06')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create view if not exists dedup_v as select id, value, time, to_string(time) as time_string from dedup(table(t_dedup), id, value, to_string(time))"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801", "query":"select id, count() from dedup_v group by id"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["3", 1],
                ["2", 1],
                ["1", 3]
                ]}
            ]
        },
        {
            "id": 15,
            "tags": ["xirr", "cluster_table_bug"],
            "name": "xirr on table as view",
            "description": "create a stream, and create a view with xirr check xirr",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists xirr_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_xirr"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_xirr(id int, income float, date date)"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_xirr", "wait":1, "query":"insert into t_xirr(id, income, date)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:01')(1, -1000, '2020-01-05 09:01:01')(1, 3100, '2020-01-18 09:01:01')(1, 100, '2020-03-09 09:01:01')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create view if not exists xirr_v as select id, count(), xirr(income, date, 0.1) as xirr from table(t_xirr) group by id"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801", "query":"select id, count(), avg(xirr) from xirr_v group by id"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", 1, 3.313433458588908]
                ]}
            ]
        },
        {
            "id": 16,
            "tags": ["xirr", "bug"],
            "name": "xirr on table as view with calculated alias field as date",
            "description": "create a stream, and create a view with xirr with a caculated alias date from to_date(date of datetime64) check xirr",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists xirr_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_xirr"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_xirr(id int, income float, date datetime64)"},
                    {"client":"python", "query_type": "table", "depends_on_stream":"t_xirr","wait":1, "query":"insert into t_xirr(id, income, date)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:01')(1, -1000, '2020-01-05 09:01:01')(1, 3100, '2020-01-18 09:01:01')(1, 100, '2020-03-09 09:01:01')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create view if not exists xirr_v as select id, count(), xirr(income, to_date(date), 0.1) as xirr from table(t_xirr) group by id"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801", "query":"select id, count(), avg(xirr) from xirr_v group by id"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", 1, 3.313433458588908]
                ]}
            ]
        },
        {
            "id": 17,
            "tags": ["xirr"],
            "name": "xirr on stream as view",
            "description": "create a stream, and create a view with xirr check xirr",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists xirr_v"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"drop stream if exists t_xirr"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_xirr(id int, income float, date date)"},
                    {"client":"python", "query_type": "table", "depends_on_stream":"t_xirr","wait":1, "query":"create view if not exists xirr_v as select window_start, window_end, xirr(income, date) as xirr from tumble(t_xirr, to_datetime(date), interval 40 day) group by window_start, window_end"},
                    {"client":"python", "query_type": "stream","depends_on_stream": "xirr_v", "wait":1, "query_id": "801", "query_end_timer": 5, "query":"select count(), avg(xirr) from xirr_v"},
                    {"client":"python", "query_type": "table", "wait":3,"depends_on":"801", "query":"insert into t_xirr(id, income, date)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:01')(1, -1000, '2020-01-05 09:01:01')(1, 3100, '2020-01-18 09:01:01')(1, 100, '2020-03-09 09:01:01')"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", 1.261261324646445]
                ]}
            ]
        },
        {
            "id": 18,
            "tags": ["func"],
            "name": "array sum",
            "description": "calculate array_sum for integer & float",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table", "wait":1, "query_id": "802", "query_end_timer": 5, "query":"SELECT [1, 1, 1] AS a, array_sum(a)"},
                    {"client":"python", "query_type": "table", "wait":1, "query_id": "803", "query_end_timer": 5, "query":"SELECT [1.5, 2.2, 3] AS a, array_sum(a)"}
                    ]}
            ],

            "expected_results": [
                {"query_id":"802", "expected_results":[
                    ["[1, 1, 1]", 3]]},
                {"query_id":"803", "expected_results":[
                    ["[1.5, 2.2, 3.0]", 6.7]]}
            ]
        },
        {
            "id": 19,
            "tags": ["lags", "cluster_table_bug"],
            "name": "lags on table as view, tail lags with array_sum",
            "description": "create a stream, and create a view with xirr check xirr",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists lags_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_lags"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_lags(id int, income float, time datetime64(3))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_lags", "wait":1, "query":"insert into t_lags(id, income, time)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:02')(1, -1000, '2020-01-05 09:01:03')(1, 3100, '2020-01-18 09:01:04')(1, 100, '2020-03-09 09:01:05')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create view if not exists lags_v as select id, lags(income, 1, 10) as income_lags, array_sum(income_lags) as lags_sum from table(t_lags) order by time desc limit 1"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801", "query":"select id, income_lags, lags_sum from lags_v"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", "[3100.0, -1000.0, -1000.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]", 100.0]
                ]}
            ]
        },
        {
            "id": 20,
            "tags": ["lags", "cluster_table_bug"],
            "name": "lags on table as view, latest lags with array_sum",
            "description": "create a stream, and create a view with lags check arry_sum of latest lags",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists lags_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_lags"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_lags(id int, income float, time datetime64(3))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_lags", "wait":1, "query":"insert into t_lags(id, income, time)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:02')(1, -1000, '2020-01-05 09:01:03')(1, 3100, '2020-01-18 09:01:04')(1, 100, '2020-03-09 09:01:05')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create view if not exists lags_v as select id, latest(lags(income, 1, 10)) as income_lags_latest, array_sum(income_lags_latest) as income_lags_sum from table(t_lags) group by id"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801", "query":"select id, income_lags_latest, income_lags_sum from lags_v"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", "[3100.0, -1000.0, -1000.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]", 100.0]
                ]}
            ]
        },
        {
            "id": 21,
            "tags": ["lags"],
            "name": "lags on table as materialized view, latest lags with array_sum",
            "description": "create a stream, and create a materialized view with lags check arry_sum of latest lags",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists lags_mv"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_lags"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_lags(id int, income float, time datetime64(3))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_lags", "wait":1, "query":"insert into t_lags(id, income, time)values(1, -1000, '2020-01-02 00:00:01')(1, -1000, '2020-01-03 09:01:02')(1, -1000, '2020-01-05 09:01:03')(1, 3100, '2020-01-18 09:01:04')(1, 100, '2020-03-09 09:01:05')"},
                    {"client":"python", "query_type": "table", "wait":3, "query":"create materialized view if not exists lags_mv as select id, latest(lags(income, 1, 10)) as income_lags_latest, array_sum(income_lags_latest) as income_lags_sum from t_lags group by id settings seek_to='earliest'"},
                    {"client":"python", "query_type": "table","depends_on_stream":"lags_mv","wait":5,"query_id": "801", "query":"select id, income_lags_latest, income_lags_sum from lags_mv limit 1 settings seek_to='earliest'"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", "[3100.0, -1000.0, -1000.0, -1000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]", 100.0]
                ]}
            ]
        },
        {
            "id": 22,
            "tags": ["bool"],
            "name": "tail with bool check in where",
            "description": "create a stream, tail with bool check in where",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists bool_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_bool"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_bool(id int, value int, bool_f bool, time datetime64(3))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_bool", "wait":1, "query":"insert into t_bool(id, value, bool_f,time)values(1, -1000, true, '2020-01-02 00:00:01')(1, -1000,true, '2020-01-03 09:01:02')(1, -1000, false, '2020-01-05 09:01:03')(1, 3100, false, '2020-01-18 09:01:04')(1, 100,true, '2020-03-09 09:01:05')"},
                    {"client":"python", "query_type": "table", "wait":3,"query_id": "801", "query":"select id, value, bool_f from t_bool where bool_f=true limit 1 settings seek_to = 'earliest'"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", "-1000", "True"]
                ]}
            ]
        },
        {
            "id": 23,
            "tags": ["bool", "bug"],
            "name": "view with bool",
            "description": "create a view with subquery and have tumble window",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists bool_v"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_bool"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_bool(id int, value int, bool_f bool, time datetime64(3))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_bool", "wait":1, "query":"insert into t_bool(id, value, bool_f,time)values(1, -1000, true, '2020-01-02 00:00:01')(1, -1000,true, '2020-01-03 09:01:02')(1, -1000, false, '2020-01-05 09:01:03')(1, 3100, false, '2020-01-18 09:01:04')(1, 100,true, '2020-03-09 09:01:05')"},
                    {"client":"python", "query_type": "table", "wait":3,"query":"create view if not exists bool_v as with transformed as (select id, value, bool_f, time from t_bool) select window_start, window_end, id, bool_f, count(bool_f) from tumble(transformed, time, 1s)  group by id, bool_f, window_start, window_end  settings seek_to='earliest'"},
                    {"client":"python", "query_type": "stream", "query_end_timer":6,"wait":1,"query_id": "801", "query":"select id, bool_f, count() from bool_v group by id, bool_f"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", "False", 2],
                ["1", "True", 2]
                ]}
            ]
        },
        {
            "id": 24,
            "tags": ["bool", "cluster_table_bug"],
            "name": "materialized view with bool",
            "description": "create a materialized view with subquery and have tumble window, and count() group by id, bool_f on the mv",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1, "query":"drop view if exists bool_mv"},
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_bool"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_bool(id int, value int, bool_f bool, time datetime64(3))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_bool", "wait":2, "query":"insert into t_bool(id, value, bool_f,time)values(1, -1000, true, '2020-01-02 00:00:01')(1, -1000,true, '2020-01-03 09:01:02')(1, -1000, false, '2020-01-05 09:01:03')(1, 3100, false, '2020-01-18 09:01:04')(1, 100,true, '2020-03-09 09:01:05')"},
                    {"client":"python", "query_type": "table","wait":3,"query":" create materialized view if not exists bool_mv as with transformed as (select id, value, bool_f, time from t_bool) select window_start as ws, window_end as we, id, bool_f, count(bool_f) from tumble(transformed, time, 1s)  group by id, bool_f, window_start, window_end  settings seek_to='earliest'"},
                    {"client":"python", "query_type": "table","wait":10, "depends_on_stream":"bool_mv","query_id": "801", "query":"select id, bool_f, count() from table(bool_mv) group by id, bool_f"}

                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["1", "False", 2],
                ["1", "True", 2]
                ]}
            ]
        },
        {
            "id": 25,
            "tags": ["bool", "cluster_table_bug"],
            "name": "comparison bool",
            "description": "comparison operations == != > < >= <=  return bool result",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_bool"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_bool(id int, value int, bool_f bool, time datetime64(3))"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_bool", "wait":1, "query":"insert into t_bool(id, value, bool_f,time) values(1, -1000, true, '2020-01-02 00:00:01')(1, 0,true, '2020-01-03 09:01:02')(1, 1, false, '2020-01-05 09:01:03')(1, 2, false, '2020-01-18 09:01:04')"},
                    {"client":"python", "query_type": "table","wait":3, "query_id": "801", "query":"select if(1<2,'a','b'), 0 as v1, 'true' as v2, v1>0, v2='true', v1=true, v2=true, value=1, value!=1, value>1, value<=1, value<1, value>=1 from table(t_bool) where id = 1 and id != 0 and to_uint8(id)"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["a", 0, "true", "False", "True", "False", "True", "False", "True", "False", "True", "True", "False"],
                ["a", 0, "true", "False", "True", "False", "True", "False", "True", "False", "True", "True", "False"],
                ["a", 0, "true", "False", "True", "False", "True", "True", "False", "False", "True", "False", "True"],
                ["a", 0, "true", "False", "True", "False", "True", "False", "True", "True", "False", "False", "True"]
                ]}
            ]
        },
        {
            "id": 26,
            "tags": ["func", "cluster_table_bug"],
            "name": "to_bool",
            "description": "convert uint, string to bool",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_bool"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_bool(bool_s string, bool_i uint8, bool_f bool)"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_bool", "wait":1, "query":"insert into t_bool(bool_s, bool_i, bool_f) values('true', 0, true)('false', 1, false)"},
                    {"client":"python", "query_type": "table","wait":3,"query_id": "801", "query":"select to_bool('true'), to_bool('false'), to_bool(1), to_bool(0), to_bool(true), to_bool(false), to_bool(bool_s), to_bool(bool_i), to_bool(bool_f) from table(t_bool)"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["True", "False", "True", "False", "True", "False", "True", "False", "True"],
                ["True", "False", "True", "False", "True", "False", "False", "True", "False"]
                ]}
            ]
        },
        {
            "id": 27,
            "tags": ["bool"],
            "name": "finite_nan",
            "description": "check finite, nan",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801", "query":"SELECT 1/0 as infimum, is_finite(infimum), is_infinite(infimum), if_not_finite(infimum, 42), is_nan(NaN)"}
                    ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["inf", "False", "True", 42, "True"]
                ]}
            ]
        },
        {
            "id": 28,
            "tags": ["func", "cluster_table_bug"],
            "name": "json_extrac_array",
            "description": "extract array from json string",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_json_raw"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_json_raw(raw string)"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_json_raw", "wait":1, "query":"insert into t_json_raw(raw) values('')('[1, 2]')('[\"abc\", \"xyz\"]')"},
                    {"client":"python", "query_type": "table","wait":3,"query_id": "801", "query":"select raw, json_extract_array(raw) as tags, tags[1], tags[2] from table(t_json_raw)"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "802", "query":"select '{\"a\":1,\"tags\":[\"x\",\"y\"]}' as raw, json_extract_array(raw:tags) as tags, tags[1], tags[2]"}
                    ]}
            ],

            "expected_results": [
                {"query_id":"801", "expected_results":[
                    ["", "[]", "", ""],
                    ["[1, 2]", "['1', '2']", "1", "2"],
                    ["[\"abc\", \"xyz\"]", "['abc', 'xyz']", "abc", "xyz"]
                ]},
                {"query_id":"802", "expected_results":[
                    ["{\"a\":1,\"tags\":[\"x\",\"y\"]}", "['x', 'y']", "x", "y"]
                ]}
            ]
        },
        {
            "id": 29,
            "tags": ["func", "cluster_table_bug"],
            "name": "array_element",
            "description": "extract element from json array string",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists t_json_raw"},
                    {"client":"python", "query_type": "table","wait":1, "query":"create stream t_json_raw(raw string)"},
                    {"client":"python", "query_type": "table","depends_on_stream":"t_json_raw", "wait":1, "query":"insert into t_json_raw(raw) values('')('[1, 2]')('[\"abc\", \"xyz\"]')"},
                    {"client":"python", "query_type": "table","wait":3,"query_id": "801", "query":"select raw, raw[*], raw[1], raw[2] from table(t_json_raw)"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "802", "query":"select '{\"a\":1,\"tags\":[\"x\",\"y\"]}' as raw, raw:tags[*], raw:tags[1], raw:tags[2]"}
                    ]}
            ],

            "expected_results": [
                {"query_id":"801", "expected_results":[
                    ["", "[]", "", ""],
                    ["[1, 2]", "['1', '2']", "1", "2"],
                    ["[\"abc\", \"xyz\"]", "['abc', 'xyz']", "abc", "xyz"]
                ]},
                {"query_id":"802", "expected_results":[
                    ["{\"a\":1,\"tags\":[\"x\",\"y\"]}", "['x', 'y']", "x", "y"]
                ]}
            ]
        },
        {
            "id": 30,
            "tags": ["geo"],
            "name": "point_in_polygon",
            "description": "point in polygon",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801", "query":"SELECT point_in_polygon((3., 3.), [(6, 0), (8, 4), (5, 8), (0, 2)]) AS res"}
                ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ["True"]
                ]}
            ]
        },
        {
            "id": 31,
            "tags": ["type", "cluster_table_bug"],
            "name": "low_cardinality(bool)",
            "description": "low_cardinality(bool)",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":2, "query":"drop stream if exists lineorder_flat"},
                    {"client":"python", "query_type": "table","wait":1, "query":"CREATE STREAM lineorder_flat
                    (`LO_ORDERKEY` uint32, `LO_LINENUMBER` uint8, `LO_CUSTKEY` uint32, `LO_PARTKEY` uint32, `LO_SUPPKEY` uint32, `LO_ORDERDATE` date, `LO_ORDERPRIORITY` low_cardinality(string), `LO_SHIPPRIORITY` uint8, `LO_QUANTITY` uint8, `LO_EXTENDEDPRICE` uint32, `LO_ORDTOTALPRICE` uint32, `LO_DISCOUNT` uint8, `LO_REVENUE` uint32, `LO_SUPPLYCOST` uint32, `LO_TAX` uint8, `LO_COMMITDATE` date, `LO_SHIPMODE` low_cardinality(string), `C_NAME` string, `C_ADDRESS` string, `C_CITY` low_cardinality(string), `C_NATION` low_cardinality(string), `C_REGION` low_cardinality(string), `C_PHONE` string, `C_MKTSEGMENT` low_cardinality(string), `S_NAME` string, `S_ADDRESS` string, `S_CITY` low_cardinality(string), `S_NATION` low_cardinality(string), `S_REGION` low_cardinality(string), `S_PHONE` string, `P_NAME` string, `P_MFGR` low_cardinality(string), `P_CATEGORY` low_cardinality(string), `P_BRAND` low_cardinality(string), `P_COLOR` low_cardinality(string), `P_TYPE` low_cardinality(string), `P_SIZE` uint8, `P_CONTAINER` low_cardinality(string)
                    )"},
                    {"client":"python", "query_type": "table","wait":3,"query_id": "801", "query":"SELECT  sum(LO_REVENUE), to_year(LO_ORDERDATE) AS year, P_BRAND FROM table(lineorder_flat) WHERE (P_CATEGORY = 'MFGR#12') AND (S_REGION = 'AMERICA') GROUP BY  year, P_BRAND ORDER BY  year ASC, P_BRAND ASC"}
                ]}
            ],

            "expected_results": [{"query_id":"801", "expected_results":[
                ]}
            ]
        },
        {
            "id": 32,
            "tags": ["func"],
            "name": "bool functions",
            "description": "some bool funtions",
            "steps":[
                {"statements": [
                    {"client":"python", "query_type": "table","wait":1,"query_id": "801", "query":"select multi_if(multi_search_any('hello world',['hello']),'a','default')"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "802", "query":"select multi_match_any('hello world', ['hello1', 'world'])"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "803", "query":"select not_ilike('hello world', '%hellO %'), not_like('hello world', '%hellO %'), like('hello world', '%hellO %'), match('hello world', 'world')"},
                    {"client":"python", "query_type": "table","wait":1, "query":"select * from system.asynchronous_metric_log where metric='AsynchronousMetricsCalculationTimeSpent'"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "804", "query":"SELECT to_uint64(1) IN (SELECT * FROM system.numbers LIMIT 1100000)"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "805", "query":"SELECT -1 IN (-1), -1 IN (1, -1, 2), 1. IN (1), 1.1 IN (1, -1), 1. IN (3, 1., -1), 1 IN (3, 2, 1), to_int16(-1) IN (255), materialize(-1) IN (-1), materialize(-1) IN (1, -1, 2), materialize(1.) IN (1), materialize(1.1) IN (1, -1), materialize(1.) IN (3, 1., -1), materialize(1) IN (3, 2, 1), materialize(to_int16(-1)) IN (255)"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "806", "query":"SELECT DISTINCT array_filter(x -> not_empty(x), array_join([[''], ['is_registred'], ['registration_month','user_login','is_registred'], ['is_registred'], ['is_registred'], ['']]))"},
                    {"client":"python", "query_type": "table","wait":1,"query_id": "807", "query":"SELECT has([0, 0, 1], 1), has([0, 0, 0], 1), not 1, not false, true where true"}
                ]}
            ],

            "expected_results": [
                {"query_id":"801", "expected_results":[["a"]]},
                {"query_id":"802", "expected_results":[["True"]]},
                {"query_id":"803", "expected_results":[["False", "True", "False", "True"]]},
                {"query_id":"804", "expected_results":[["True"]]},
                {"query_id":"805", "expected_results":[["True", "True", "True", "False", "True", "True", "False", "True", "True", "True", "False", "True", "True", "False"]]},
                {"query_id":"806", "expected_results":[["[]"], ["['is_registred']"], ["['registration_month', 'user_login', 'is_registred']"]]},
                {"query_id":"807", "expected_results":[["True", "False", "False", "True", "True"]]}
            ]
        },
        {
            "id": 33,
            "tags": ["func"],
            "name": "max_k function",
            "description": "Tests covering max_k aggregation with decimal argument and nested tuple",
            "steps":[
                {
                "statements": [
                    {"client":"python", "query_type": "table", "wait":2, "query": "drop stream if exists maxk_types"},
                    {"client":"python", "query_type": "table", "wait":2, "query": "create stream maxk_types(uint8 uint8,uint16 uint16,uint32 uint32,uint64 uint64,uint128 uint128,uint256 uint256,int8 int8,int16 int16,int32 int32,int64 int64,int128 int128,int256 int256,float32 float32,float64 float64,date date,date32 date32,datetime datetime,datetime64 datetime64,string string,fixed_string fixed_string(1),enum enum('a'=1,'b'=2,'c'=3),enum16 enum16('a'=1,'b'=2,'c'=3),decimal32 decimal32(5),decimal64 decimal64(5),decimal128 decimal128(5),decimal256 decimal256(5))"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"insert into maxk_types(uint8 ,uint16 ,uint32 ,uint64 ,uint128 ,uint256 ,int8 ,int16 ,int32 ,int64 ,int128 ,int256 ,float32 ,float64 ,date ,date32 ,datetime ,datetime64 ,string ,fixed_string ,enum ,enum16 ,decimal32 ,decimal64 ,decimal128 ,decimal256) values(1,1,1,1,1,1, 1,1,1,1,1,1, 1.0,1.0, '2022-12-16','2022-12-16', '2022-03-24 17:17:17','2022-03-24 17:17:17' ,'a','a' , 'a','a' ,1.00,1.00,1.00,1.00)"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"insert into maxk_types(uint8 ,uint16 ,uint32 ,uint64 ,uint128 ,uint256 ,int8 ,int16 ,int32 ,int64 ,int128 ,int256 ,float32 ,float64 ,date ,date32 ,datetime ,datetime64 ,string ,fixed_string ,enum ,enum16 ,decimal32 ,decimal64 ,decimal128 ,decimal256) values(2,2,2,2,2,2, 2,2,2,2,2,2, 2.0,2.0, '2022-12-16','2022-12-16', '2022-12-16 17:17:17','2022-12-16 17:17:17' ,'b','b' , 'b','b' ,2.00,2.00,2.00,2.00)"},
                    {"client":"python", "query_type": "table", "wait":2, "query":"insert into maxk_types(uint8 ,uint16 ,uint32 ,uint64 ,uint128 ,uint256 ,int8 ,int16 ,int32 ,int64 ,int128 ,int256 ,float32 ,float64 ,date ,date32 ,datetime ,datetime64 ,string ,fixed_string ,enum ,enum16 ,decimal32 ,decimal64 ,decimal128 ,decimal256) values(3,3,3,3,3,3, 3,3,3,3,3,3, 3.0,3.0, '2022-12-16','2022-12-16', '2022-12-16 17:17:17','2022-12-16 17:17:17' ,'c','c' , 'c','c' ,3.00,3.00,3.00,3.00)"},
                    {"client":"python", "query_type": "table", "query_id":"800", "wait":2, "query":"select max_k(decimal128,2) from table(maxk_types)"},
                    {"client":"python", "query_type": "table", "query_id":"801", "wait":2, "query":"select max_k((decimal32,string),2) from table(maxk_types)"},
                    {"client":"python", "query_type": "table", "query_id":"802", "wait":2, "query":"select max_k(((string,decimal32),decimal64),2,uint8) from table(maxk_types)"},
                    {"client":"python", "query_type": "table", "query_id":"803", "wait":2, "query":"select max_k( (uint8,uint16,uint32,uint64,uint128,uint256,int8,int16,int32,int64,int128,int256,float32,float64),2 ) from table(maxk_types)"},
                    {"client":"python", "query_type": "table", "query_id":"804", "wait":2, "query":"select max_k( (date,date32,datetime,datetime64,string,fixed_string),2 ) from table(maxk_types)"},
                    {"client":"python", "query_type": "table", "query_id":"805", "wait":2, "query":"select max_k( (enum,enum16,decimal32,decimal64,decimal128,decimal256),2 ) from table(maxk_types)"}
                ]
                }
            ],
            "expected_results": [
                {"query_id":"800", "expected_results":[
                    ["[Decimal('3'), Decimal('2')]"]
                ]},
                {"query_id":"801", "expected_results":[
                    ["[((Decimal('3'), 'c'),), ((Decimal('2'), 'b'),)]"]
                ]},
                {"query_id":"802", "expected_results":[
                    ["[((('c', Decimal('3')), Decimal('3')), 3), ((('b', Decimal('2')), Decimal('2')), 2)]"]
                ]},
                {"query_id":"803", "expected_results":[
                    ["[((3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3.0, 3.0),), ((2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2.0, 2.0),)]"]
                ]},
                {"query_id":"804", "expected_results":[
                    ["[((datetime.date(2022, 12, 16), datetime.date(2022, 12, 16), datetime.datetime(2022, 12, 16, 17, 17, 17), datetime.datetime(2022, 12, 16, 17, 17, 17), 'c', 'c'),), ((datetime.date(2022, 12, 16), datetime.date(2022, 12, 16), datetime.datetime(2022, 12, 16, 17, 17, 17), datetime.datetime(2022, 12, 16, 17, 17, 17), 'b', 'b'),)]"]
                ]},
                {"query_id":"805", "expected_results":[
                    ["[(('c', 'c', Decimal('3'), Decimal('3'), Decimal('3'), Decimal('3')),), (('b', 'b', Decimal('2'), Decimal('2'), Decimal('2'), Decimal('2')),)]"]
                ]}
            ]
        },
        {
            "id": 34,
            "tags": ["func"],
            "name": "earliest_timestamp",
            "description": "Tests covering function earliest_timestamp() and alias earliest_ts()",
            "steps":[
              {
                "statements": [
                  {"client":"python","query_id":"800", "query_type": "table", "query":"select earliest_timestamp('UTC'), earliest_ts('UTC')"},
                  {"client":"python","query_id":"801", "query_type": "table", "query":"select to_timezone(earliest_timestamp(), 'UTC'), to_timezone(earliest_ts(), 'Asia/Shanghai')"}
                ]
              }
            ],
            "expected_results": [
              {"query_id":"800", "expected_results":[["1970-01-01 00:00:00+00:00", "1970-01-01 00:00:00+00:00"]]},
              {"query_id":"801", "expected_results":[["1970-01-01 00:00:00+00:00", "1970-01-01 08:00:00+08:00"]]}
            ]
        }
    ]
}

