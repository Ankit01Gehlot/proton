{
  "test_suite_name": "dedup",
  "tag": "smoke",
  "test_suite_config":{
    "setup": {
      "statements": [
        {"client":"python", "query_type": "table","wait":1,"exist":"dedup_stream", "exist_wait":2, "query":"drop stream if exists dedup_stream"},
        {"client":"python", "query_type": "table", "wait":2, "query":"create stream if not exists dedup_stream(i int, s string)"}
      ]
    },
    "tests_2_run": {"ids_2_run": ["all"], "tags_2_run":[], "tags_2_skip":{"default":["todo", "to_support", "change", "bug", "sample"],"cluster": ["view", "cluster_table_bug"]}}
  },
  "comments": "Tests covering dedup smoke test cases",
  "tests": [
    {
      "id": 0,
      "tags": ["dedup"],
      "name": "dedup-default-args",
      "description": "dedup with default timeout and key limits",
      "steps":[
        {
          "statements": [
            {"client":"python","query_id":"1800", "wait":2,"terminate":"manual", "query_type": "stream", "query":"select i, s from dedup(dedup_stream, s)"},
            {"client":"python", "query_type": "table","depends_on":1800, "query": "insert into dedup_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"},
            {"client":"python", "query_type": "table","depends_on":1800,"kill":"1800","kill_wait":5, "query": "insert into dedup_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"}
          ]
        }
      ],
      "expected_results": [
        {
          "query_id":"1800",
          "expected_results":[
            [1, "s1"], [2, "s2"], [3, "s3"]
          ]
        }
      ]
    },
    {
      "id": 1,
      "tags": ["dedup"],
      "name": "dedup-explicit-ttl",
      "description": "dedup with explicit ttl but with default key limits",
      "steps":[
        {
          "statements": [
            {"client":"python","query_id":"1801", "wait":2,"terminate":"manual", "query_type": "stream", "query":"select i, s from dedup(dedup_stream, s, 1s)"},
            {"client":"python", "query_type": "table","depends_on":1801, "query": "insert into dedup_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"},
            {"client":"python", "query_type": "table","depends_on":1801, "wait":1,"kill":"1801","kill_wait":5, "query": "insert into dedup_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"}
          ]
        }
      ],
      "expected_results": [
        {
          "query_id":"1801",
          "expected_results":[
            [1, "s1"], [2, "s2"], [3, "s3"], [1, "s1"], [2, "s2"], [3, "s3"]
          ]
        }
      ]
    },
    {
      "id": 2,
      "tags": ["dedup"],
      "name": "dedup-explicit-key-count",
      "description": "dedup with explicit key limits but with default TTL",
      "steps":[
        {
          "statements": [
            {"client":"python","query_id":"1802", "wait":2,"terminate":"manual", "query_type": "stream", "query":"select i, s from dedup(dedup_stream, s, 0s, 2)"},
            {"client":"python", "query_type": "table","depends_on":1802, "query": "insert into dedup_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"},
            {"client":"python", "query_type": "table","depends_on":1802, "kill":"1802","kill_wait":5, "query": "insert into dedup_stream(i, s) values (2, 's2'), (3, 's3'), (1, 's1')"}
          ]
        }
      ],
      "expected_results": [
        {
          "query_id":"1802",
          "expected_results":[
            [1, "s1"], [2, "s2"], [3, "s3"], [1, "s1"]
          ]
        }
      ]
    },
    {
      "id": 3,
      "tags": ["dedup"],
      "name": "dedup-explicit-ttl-and-key-limits",
      "description": "dedup with explicit ttl and key limits",
      "steps":[
        {
          "statements": [
            {"client":"python","query_id":"1803", "wait":2,"terminate":"manual", "query_type": "stream", "query":"select i, s from dedup(dedup_stream, s, 1s, 2)"},
            {"client":"python", "query_type": "table","depends_on":1803, "query": "insert into dedup_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"},
            {"client":"python", "query_type": "table","depends_on":1803, "wait":1,"kill":"1803","kill_wait":5, "query": "insert into dedup_stream(i, s) values (1, 's1'), (2, 's2'), (3, 's3')"}
          ]
        }
      ],
      "expected_results": [
        {
          "query_id":"1803",
          "expected_results":[
            [1, "s1"], [2, "s2"], [3, "s3"], [1, "s1"], [2, "s2"], [3, "s3"]
          ]
        }
      ]
    },
    {
      "id": 4,
      "tags": ["dedup"],
      "name": "dedup-expression",
      "description": "dedup with explicit function expression limits",
      "steps":[
        {
          "statements": [
            {"client":"python","query_id":"1800", "wait":2,"terminate":"manual", "query_type": "stream", "query":"select i from dedup(dedup_stream, s:time)"},
            {"client":"python","query_id":"1801", "wait":2,"terminate":"manual", "query_type": "stream", "query":"select count() from dedup(dedup_stream, s:time) emit periodic 10s"},
            {"client":"python", "query_type": "table","depends_on":1801,"kill":"1800,1801","kill_wait":12, "query": "insert into dedup_stream(i, s) values (1, '{\"time\": \"2023-1-1\"}')(2, '{\"time\": \"2023-1-1\"}')(3, '{\"time\": \"2023-1-2\"}')"}
          ]
        }
      ],
      "expected_results": [
        {
          "query_id":"1800",
          "expected_results":[
            [1], [3]
          ]
        },
        {
          "query_id":"1801",
          "expected_results":[
            [2]
          ]
        }
      ]
    }
  ]
}