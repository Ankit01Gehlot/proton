-- { echo }
with anySimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(any, uint64)	0
with anyLastSimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(anyLast, uint64)	0
with minSimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(min, uint64)	0
with maxSimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(max, uint64)	0
with sumSimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(sum, uint64)	0
with sumWithOverflowSimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(sumWithOverflow, uint64)	0
with groupBitAndSimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(groupBitAnd, uint64)	0
with groupBitOrSimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(groupBitOr, uint64)	0
with groupBitXorSimpleState(number) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(groupBitXor, uint64)	0
with sumMapSimpleState(([number], [number])) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(sumMap, tuple(array(uint64), array(uint64)))	([],[])
with minMapSimpleState(([number], [number])) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(minMap, tuple(array(uint64), array(uint64)))	([0],[0])
with maxMapSimpleState(([number], [number])) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(maxMap, tuple(array(uint64), array(uint64)))	([0],[0])
with groupArrayArraySimpleState([number]) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(groupArrayArray, array(uint64))	[0]
with groupUniqArrayArraySimpleState([number]) as c select to_type_name(c), c from numbers(1);
SimpleAggregateFunction(groupUniqArrayArray, array(uint64))	[0]
-- non-SimpleAggregateFunction
with countSimpleState(number) as c select to_type_name(c), c from numbers(1); -- { serverError 36 }
