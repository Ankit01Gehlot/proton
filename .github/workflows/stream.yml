name: ProtonCI

on: # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - develop

jobs:
  BuildAndStreamTest:
    uses: timeplus-io/proton/.github/workflows/run_command.yml@feature/issue-102-setup-ci-pipeline
    if: github.event.pull_request.draft == false
    with:
      ec2-instance-type: c5.12xlarge
      ec2-image-id: ami-045a86d6d301ab637
      submodules: 'true'
      command: |
        echo "download cache.tar.gz"
        cd $GITHUB_WORKSPACE
        aws s3 cp --no-progress s3://tp-internal/proton/cache.tar.gz .

        echo "uncompress cache.tar.gz"
        mkdir $GITHUB_WORKSPACE/ccache
        tar -zxf ./cache.tar.gz -C $GITHUB_WORKSPACE/ccache
        rm cache.tar.gz

        echo "build proton binary"
        ./docker/packager/packager --package-type binary --sanitizer address --cache ccache --ccache_dir $GITHUB_WORKSPACE/ccache --output-dir $GITHUB_WORKSPACE/output
        docker run --name static-server -p 8080:80 -v $GITHUB_WORKSPACE/output:/usr/share/nginx/html:ro -d nginx
        cd $GITHUB_WORKSPACE/docker/server

        echo "build proton docker image"
        docker build . --network host --build-arg single_binary_location_url=http://localhost:8080/proton -t timeplus/proton:$GITHUB_SHA

        echo "run stream test"
        cd $GITHUB_WORKSPACE/tests/stream
        env
        export PROTON_VERSION=$GITHUB_SHA
        pip3 install -r helpers/requirements.txt
        python3 ci_runner.py

        echo "upload cache.tar.gz"
        tar -zcf ./cache.tar.gz -C $GITHUB_WORKSPACE/ccache .
        ls -al .
        aws s3 cp --no-progress ./cache.tar.gz s3://tp-internal/proton/

        echo "check test result"
        cat $GITHUB_WORKSPACE/tests/stream/.status | grep OK

        echo "push proton docker image"
        docker push timeplus/proton:$GITHUB_SHA


    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  SkipDraft:
    if: github.event.pull_request.draft == true
    runs-on: ubuntu-latest
    timeout-minutes: 1
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Skip
      run: echo "Skip"
