FunctionsStringHash.cpp:    static constexpr auto name = "ngram_sim_hash";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_sim_hash_case_insensitive";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_sim_hash_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_sim_hash_case_insensitive_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_sim_hash";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_sim_hash_case_insensitive";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_sim_hash_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_sim_hash_case_insensitive_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_min_hash";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_min_hash_case_insensitive";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_min_hash_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_min_hash_case_insensitive_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_min_hash";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_min_hash_case_insensitive";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_min_hash_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_min_hash_case_insensitive_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_min_hash_arg";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_min_hash_arg_case_insensitive";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_min_hash_arg_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "ngram_min_hash_arg_case_insensitive_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_min_hash_arg";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_min_hash_arg_case_insensitive";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_min_hash_arg_utf8";
FunctionsStringHash.cpp:    static constexpr auto name = "word_shingle_min_hash_arg_case_insensitive_utf8";
stem.cpp:    static constexpr auto name = "stem";
moduloOrZero.cpp:struct NameModuloOrZero { static constexpr auto name = "modulo_or_zero"; };
multiSearchFirstPositionUTF8.cpp:    static constexpr auto name = "multi_search_first_position_utf8";
runningAccumulate.cpp:    static constexpr auto name = "running_accumulate";
FunctionsBinaryRepr.cpp:    static constexpr auto name = "hex";
FunctionsBinaryRepr.cpp:    static constexpr auto name = "unhex";
FunctionsBinaryRepr.cpp:    static constexpr auto name = "bin";
FunctionsBinaryRepr.cpp:    static constexpr auto name = "unbin";
FunctionsBinaryRepr.cpp:    static constexpr auto name = Impl::name;
FunctionsBinaryRepr.cpp:    static constexpr auto name = Impl::name;
multiMatchAllIndices.cpp:    static constexpr auto name = "multi_match_all_indices";
now.cpp:    static constexpr auto name = "now";
runningConcurrency.cpp:        static constexpr auto name = Name::name;
runningConcurrency.cpp:        static constexpr auto name = "running_concurrency";
fuzzBits.cpp:    static constexpr auto name = "fuzz_bits";
ifNull.cpp:    static constexpr auto name = "if_null";
transform.cpp:    static constexpr auto name = "transform";
positionCaseInsensitiveUTF8.cpp:    static constexpr auto name = "position_case_insensitive_utf8";
rowNumberInBlock.cpp:    static constexpr auto name = "row_number_in_block";
aes_decrypt_mysql.cpp:    static constexpr auto name = "aes_decrypt_mysql";
abs.cpp:struct NameAbs { static constexpr auto name = "abs"; };
lemmatize.cpp:    static constexpr auto name = "lemmatize";
stringCutToZero.cpp:    static constexpr auto name = "to_string_cut_to_zero";
h3IndexesAreNeighbors.cpp:    static constexpr auto name = "h3_indexes_are_neighbors";
dumpColumnStructure.cpp:    static constexpr auto name = "dump_column_structure";
h3GetBaseCell.cpp:    static constexpr auto name = "h3_get_base_cell";
sinh.cpp:        static constexpr auto name = "sinh";
log10.cpp:struct Log10Name { static constexpr auto name = "log10"; };
serverConstants.cpp:        static constexpr auto name = "build_id";
serverConstants.cpp:        static constexpr auto name = "host_name";
serverConstants.cpp:        static constexpr auto name = "server_uuid";
serverConstants.cpp:        static constexpr auto name = "tcp_port";
serverConstants.cpp:        static constexpr auto name = "timezone";
serverConstants.cpp:        static constexpr auto name = "uptime";
serverConstants.cpp:        static constexpr auto name = "version";
serverConstants.cpp:        static constexpr auto name = "get_osk_ernel_version";
decodeXMLComponent.cpp:        static constexpr auto name = "decode_xmlc_omponent";
mathConstants.cpp:        static constexpr auto name = Impl::name;
multiFuzzyMatchAny.cpp:    static constexpr auto name = "multi_fuzzy_match_any";
tuple.cpp:    static constexpr auto name = "tuple";
bitSwapLastTwo.cpp:struct NameBitSwapLastTwo { static constexpr auto name = "__bit_swap_last_two"; };
filesystem.cpp:    static constexpr auto name = "filesystem_available";
filesystem.cpp:    static constexpr auto name = "filesystem_free";
filesystem.cpp:    static constexpr auto name = "filesystem_capacity";
filesystem.cpp:    static constexpr auto name = Impl::name;
materialize.h:    static constexpr auto name = "materialize";
FunctionStringOrArrayToT.h:    static constexpr auto name = Name::name;
h3ToChildren.cpp:    static constexpr auto name = "h3_to_children";
asin.cpp:struct AsinName { static constexpr auto name = "asin"; };
isZeroOrNull.cpp:    static constexpr auto name = "is_zero_or_null";
normalizeString.cpp:    static constexpr auto name = "normalize_utf8_nfc";
normalizeString.cpp:    static constexpr auto name = "normalize_utf8_nfd";
normalizeString.cpp:    static constexpr auto name = "normalize_utf8_nfkc";
normalizeString.cpp:    static constexpr auto name = "normalize_utf8_nfkd";
sign.cpp:    static constexpr auto name = "sign";
geoToH3.cpp:    static constexpr auto name = "geo_to_h3";
appendTrailingCharIfAbsent.cpp:    static constexpr auto name = "append_trailing_char_if_absent";
replaceAll.cpp:    static constexpr auto name = "replace_all";
currentProfiles.cpp:        static constexpr auto name = (kind == Kind::CURRENT_PROFILES) ? "current_profiles" : ((kind == Kind::ENABLED_PROFILES) ? "enabled_profiles" : "default_profiles");
log.cpp:struct LogName { static constexpr auto name = "log"; };
log.cpp:        static constexpr auto name = LogName::name;
FunctionsBitmap.h:    static constexpr auto name = Name::name;
FunctionsBitmap.h:    static constexpr auto name = Name::name;
FunctionsBitmap.h:    static constexpr auto name = Impl::name;
FunctionsBitmap.h:    static constexpr auto name = "bitmap_subset_in_range";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_subset_limit";
FunctionsBitmap.h:    static constexpr auto name = "sub_bitmap";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_transform";
FunctionsBitmap.h:    static constexpr auto name = Impl::name;
FunctionsBitmap.h:    static constexpr auto name = "bitmap_cardinality";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_min";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_max";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_contains";
FunctionsBitmap.h:    static constexpr auto name = Name::name;
FunctionsBitmap.h:    static constexpr auto name = "bitmap_and";
FunctionsBitmap.h:    static constexpr auto name = Name::name;
FunctionsBitmap.h:    static constexpr auto name = "bitmap_build";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_to_array";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_cardinality";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_and_cardinality";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_or_cardinality";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_xor_cardinality";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_andnot_cardinality";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_has_all";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_has_any";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_or";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_xor";
FunctionsBitmap.h:    static constexpr auto name = "bitmap_andnot";
isNaN.cpp:    static constexpr auto name = "is_nan";
greatCircleDistance.cpp:    static constexpr auto name =
timezoneOf.cpp:    static constexpr auto name = "timezone_of";
byteSize.cpp:    static constexpr auto name = "byte_size";
sqrt.cpp:struct SqrtName { static constexpr auto name = "sqrt"; };
bitShiftLeft.cpp:struct NameBitShiftLeft { static constexpr auto name = "bit_shift_left"; };
visitParamExtractRaw.cpp:struct NameVisitParamExtractRaw    { static constexpr auto name = "visit_param_extract_raw"; };
visitParamExtractRaw.cpp:struct NameSimpleJSONExtractRaw    { static constexpr auto name = "simple_jsone_xtract_raw"; };
getScalar.cpp:    static constexpr auto name = "__get_scalar";
getScalar.cpp:    static constexpr auto name = Scalar::name;
getScalar.cpp:    static constexpr auto name = "shard_num";
getScalar.cpp:    static constexpr auto name = "shard_count";
getFuzzerData.h:    static constexpr auto name = "get_fuzzer_data";
replaceOne.cpp:    static constexpr auto name = "replace_one";
s2RectIntersection.cpp:    static constexpr auto name = "s2_rect_intersection";
FunctionBase64Conversion.h:    static constexpr auto name = "base64_encode";
FunctionBase64Conversion.h:    static constexpr auto name = "base64_decode";
FunctionBase64Conversion.h:    static constexpr auto name = "try_base64_decode";
FunctionBase64Conversion.h:    static constexpr auto name = Func::name;
s2RectContains.cpp:    static constexpr auto name = "s2_rect_contains";
h3ExactEdgeLengthRads.cpp:    static constexpr auto name = "h3_exact_edge_length_rads";
countMatches.h:    static constexpr auto name = CountMatchesBase::name;
FunctionFile.cpp:    static constexpr auto name = "file";
geohashDecode.cpp:    static constexpr auto name = "geohash_decode";
defaultValueOfArgumentType.cpp:    static constexpr auto name = "default_value_of_argument_type";
throwIf.cpp:    static constexpr auto name = "throw_if";
h3EdgeLengthKm.cpp:    static constexpr auto name = "h3_edge_length_km";
lcm.cpp:struct NameLCM { static constexpr auto name = "lcm"; };
h3EdgeAngle.cpp:    static constexpr auto name = "h3_edge_angle";
FunctionsRound.h:    static constexpr auto name = Name::name;
FunctionsRound.h:    static constexpr auto name = "round_down";
FunctionsRound.h:struct NameRound { static constexpr auto name = "round"; };
FunctionsRound.h:struct NameRoundBankers { static constexpr auto name = "round_bankers"; };
FunctionsRound.h:struct NameCeil { static constexpr auto name = "ceil"; };
FunctionsRound.h:struct NameFloor { static constexpr auto name = "floor"; };
FunctionsRound.h:struct NameTrunc { static constexpr auto name = "trunc"; };
FunctionsCodingIP.cpp:    static constexpr auto name = "ipv6_num_to_string";
FunctionsCodingIP.cpp:    static constexpr auto name = "cut_ipv6";
FunctionsCodingIP.cpp:    static constexpr auto name = "ipv6_string_to_num";
FunctionsCodingIP.cpp:    static constexpr auto name = Name::name;
FunctionsCodingIP.cpp:    static constexpr auto name = "ipv4_string_to_num";
FunctionsCodingIP.cpp:    static constexpr auto name = "ipv4_to_ipv6";
FunctionsCodingIP.cpp:    static constexpr auto name = "to_ipv4";
FunctionsCodingIP.cpp:    static constexpr auto name = "to_ipv6";
FunctionsCodingIP.cpp:    static constexpr auto name = "mac_num_to_string";
FunctionsCodingIP.cpp:    static constexpr auto name = "mac_string_to_num";
FunctionsCodingIP.cpp:    static constexpr auto name = "mac_string_to_oui";
FunctionsCodingIP.cpp:    static constexpr auto name = Impl::name;
FunctionsCodingIP.cpp:    static constexpr auto name = "ipv6_cidr_to_range";
FunctionsCodingIP.cpp:    static constexpr auto name = "ipv4_cidr_to_range";
FunctionsCodingIP.cpp:    static constexpr auto name = "is_ipv4_string";
FunctionsCodingIP.cpp:    static constexpr auto name = "is_ipv6_string";
FunctionsCodingIP.cpp:struct NameFunctionIPv4NumToString { static constexpr auto name = "ipv4_num_to_string"; };
FunctionsCodingIP.cpp:struct NameFunctionIPv4NumToStringClassC { static constexpr auto name = "ipv4_num_to_string_class_c"; };
toStartOfInterval.cpp:        static constexpr auto name = function_name;
toStartOfInterval.cpp:        static constexpr auto name = function_name;
toStartOfInterval.cpp:        static constexpr auto name = function_name;
toStartOfInterval.cpp:        static constexpr auto name = function_name;
toStartOfInterval.cpp:        static constexpr auto name = function_name;
toStartOfInterval.cpp:        static constexpr auto name = function_name;
toStartOfInterval.cpp:        static constexpr auto name = function_name;
toStartOfInterval.cpp:        static constexpr auto name = function_name;
toStartOfInterval.cpp:    static constexpr auto name = function_name;
trim.cpp:    static constexpr auto name = "trim_left";
trim.cpp:    static constexpr auto name = "trim_right";
trim.cpp:    static constexpr auto name = "trim_both";
hasToken.cpp:    static constexpr auto name = "has_token";
erf.cpp:struct ErfName { static constexpr auto name = "erf"; };
s2CellsIntersect.cpp:    static constexpr auto name = "s2_cells_intersect";
rand64.cpp:struct NameRand64 { static constexpr auto name = "rand64"; };
cbrt.cpp:struct CbrtName { static constexpr auto name = "cbrt"; };
concat.cpp:    static constexpr auto name = Name::name;
concat.cpp:    static constexpr auto name = "concat";
concat.cpp:    static constexpr auto name = "concat_assume_injective";
concat.cpp:    static constexpr auto name = "concat";
lower.cpp:    static constexpr auto name = "lower";
h3kRing.cpp:    static constexpr auto name = "h3k_ring";
multiSearchAllPositionsCaseInsensitiveUTF8.cpp:    static constexpr auto name = "multi_search_all_positions_case_insensitive_utf8";
FunctionsStringArray.h:    static constexpr auto name = "alpha_tokens";
FunctionsStringArray.h:    static constexpr auto name = "split_by_non_alpha";
FunctionsStringArray.h:    static constexpr auto name = "split_by_whitespace";
FunctionsStringArray.h:    static constexpr auto name = "split_by_char";
FunctionsStringArray.h:    static constexpr auto name = "split_by_string";
FunctionsStringArray.h:    static constexpr auto name = "split_by_regexp";
FunctionsStringArray.h:    static constexpr auto name = "extract_all";
FunctionsStringArray.h:    static constexpr auto name = Generator::name;
FunctionsStringArray.h:    static constexpr auto name = "array_string_concat";
acosh.cpp:        static constexpr auto name = "acosh";
h3ToGeoBoundary.cpp:    static constexpr auto name = "h3_to_geo_boundary";
replaceRegexpOne.cpp:    static constexpr auto name = "replace_regexp_one";
notEmpty.cpp:    static constexpr auto name = "not_empty";
hasThreadFuzzer.cpp:    static constexpr auto name = "has_thread_fuzzer";
bitNot.cpp:struct NameBitNot { static constexpr auto name = "bit_not"; };
multiSearchFirstIndexCaseInsensitiveUTF8.cpp:    static constexpr auto name = "multi_search_first_index_case_insensitive_utf8";
currentRoles.cpp:        static constexpr auto name = (kind == Kind::CURRENT_ROLES) ? "current_roles" : ((kind == Kind::ENABLED_ROLES) ? "enabled_roles" : "default_roles");
visitParamExtractFloat.cpp:struct NameVisitParamExtractFloat  { static constexpr auto name = "visit_param_extract_float"; };
visitParamExtractFloat.cpp:struct NameSimpleJSONExtractFloat  { static constexpr auto name = "simple_jsone_xtract_float"; };
MultiSearchImpl.h:    static constexpr auto name = Name::name;
if.cpp:    static constexpr auto name = "if";
countSubstrings.cpp:    static constexpr auto name = "count_substrings";
FunctionStringToString.h:    static constexpr auto name = Name::name;
addressToSymbol.cpp:    static constexpr auto name = "address_to_symbol";
geoToS2.cpp:    static constexpr auto name = "geo_to_s2";
stringToH3.cpp:    static constexpr auto name = "string_to_h3";
MultiMatchAllIndicesImpl.h:    static constexpr auto name = Name::name;
log2.cpp:struct Log2Name { static constexpr auto name = "log2"; };
bitWrapperFunc.cpp:struct NameBitWrapperFunc { static constexpr auto name = "__bit_wrapper_func"; };
multiSearchAnyCaseInsensitiveUTF8.cpp:    static constexpr auto name = "multi_search_any_case_insensitive_utf8";
exp.cpp:struct ExpName { static constexpr auto name = "exp"; };
exp.cpp:        static constexpr auto name = ExpName::name;
s2CapUnion.cpp:    static constexpr auto name = "s2_cap_union";
asinh.cpp:        static constexpr auto name = "asinh";
multiSearchAllPositionsUTF8.cpp:    static constexpr auto name = "multi_search_all_positions_utf8";
erfc.cpp:struct ErfcName { static constexpr auto name = "erfc"; };
aes_encrypt_mysql.cpp:    static constexpr auto name = "aes_encrypt_mysql";
caseWithExpression.cpp:    static constexpr auto name = "case_with_expression";
h3EdgeLengthM.cpp:    static constexpr auto name = "h3_edge_length_m";
exp2.cpp:struct Exp2Name { static constexpr auto name = "exp2"; };
reinterpretAs.cpp:    static constexpr auto name = "reinterpret";
reinterpretAs.cpp:    static constexpr auto name = Name::name;
reinterpretAs.cpp:struct NameReinterpretAsUInt8       { static constexpr auto name = "reinterpret_as_uint8"; };
reinterpretAs.cpp:struct NameReinterpretAsUInt16      { static constexpr auto name = "reinterpret_as_uint16"; };
reinterpretAs.cpp:struct NameReinterpretAsUInt32      { static constexpr auto name = "reinterpret_as_uint32"; };
reinterpretAs.cpp:struct NameReinterpretAsUInt64      { static constexpr auto name = "reinterpret_as_uint64"; };
reinterpretAs.cpp:struct NameReinterpretAsUInt128     { static constexpr auto name = "reinterpret_as_uint128"; };
reinterpretAs.cpp:struct NameReinterpretAsUInt256     { static constexpr auto name = "reinterpret_as_uint256"; };
reinterpretAs.cpp:struct NameReinterpretAsInt8        { static constexpr auto name = "reinterpret_as_int8"; };
reinterpretAs.cpp:struct NameReinterpretAsInt16       { static constexpr auto name = "reinterpret_as_int16"; };
reinterpretAs.cpp:struct NameReinterpretAsInt32       { static constexpr auto name = "reinterpret_as_int32"; };
reinterpretAs.cpp:struct NameReinterpretAsInt64       { static constexpr auto name = "reinterpret_as_int64"; };
reinterpretAs.cpp:struct NameReinterpretAsInt128      { static constexpr auto name = "reinterpret_as_int128"; };
reinterpretAs.cpp:struct NameReinterpretAsInt256      { static constexpr auto name = "reinterpret_as_int256"; };
reinterpretAs.cpp:struct NameReinterpretAsFloat32     { static constexpr auto name = "reinterpret_as_float32"; };
reinterpretAs.cpp:struct NameReinterpretAsFloat64     { static constexpr auto name = "reinterpret_as_float64"; };
reinterpretAs.cpp:struct NameReinterpretAsDate        { static constexpr auto name = "reinterpret_as_date"; };
reinterpretAs.cpp:struct NameReinterpretAsDateTime    { static constexpr auto name = "reinterpret_as_datetime"; };
reinterpretAs.cpp:struct NameReinterpretAsUUID        { static constexpr auto name = "reinterpret_as_uuid"; };
reinterpretAs.cpp:struct NameReinterpretAsString      { static constexpr auto name = "reinterpret_as_string"; };
reinterpretAs.cpp:struct NameReinterpretAsFixedString { static constexpr auto name = "reinterpret_as_fixed_string"; };
bitSlice.cpp:    static constexpr auto name = "bit_slice";
FunctionsEmbeddedDictionaries.h:    static constexpr auto name = Name::name;
FunctionsEmbeddedDictionaries.h:    static constexpr auto name = Name::name;
FunctionsEmbeddedDictionaries.h:    static constexpr auto name = Name::name;
FunctionsEmbeddedDictionaries.h:struct NameRegionToCity                { static constexpr auto name = "region_to_city"; };
FunctionsEmbeddedDictionaries.h:struct NameRegionToArea                { static constexpr auto name = "region_to_area"; };
FunctionsEmbeddedDictionaries.h:struct NameRegionToDistrict            { static constexpr auto name = "region_to_district"; };
FunctionsEmbeddedDictionaries.h:struct NameRegionToCountry             { static constexpr auto name = "region_to_country"; };
FunctionsEmbeddedDictionaries.h:struct NameRegionToContinent           { static constexpr auto name = "region_to_continent"; };
FunctionsEmbeddedDictionaries.h:struct NameRegionToTopContinent        { static constexpr auto name = "region_to_top_continent"; };
FunctionsEmbeddedDictionaries.h:struct NameRegionToPopulation          { static constexpr auto name = "region_to_population"; };
FunctionsEmbeddedDictionaries.h:struct NameRegionHierarchy             { static constexpr auto name = "region_hierarchy"; };
FunctionsEmbeddedDictionaries.h:struct NameRegionIn                    { static constexpr auto name = "region_in"; };
FunctionsEmbeddedDictionaries.h:    static constexpr auto name = "region_to_name";
positionCaseInsensitive.cpp:    static constexpr auto name = "position_case_insensitive";
FunctionsComparison.h:struct NameEquals          { static constexpr auto name = "equals"; };
FunctionsComparison.h:struct NameNotEquals       { static constexpr auto name = "not_equals"; };
FunctionsComparison.h:struct NameLess            { static constexpr auto name = "less"; };
FunctionsComparison.h:struct NameGreater         { static constexpr auto name = "greater"; };
FunctionsComparison.h:struct NameLessOrEquals    { static constexpr auto name = "less_or_equals"; };
FunctionsComparison.h:struct NameGreaterOrEquals { static constexpr auto name = "greater_or_equals"; };
FunctionsComparison.h:    static constexpr auto name = Name::name;
acos.cpp:struct AcosName { static constexpr auto name = "acos"; };
evalMLMethod.cpp:    static constexpr auto name = "eval_ml_method";
blockNumber.cpp:    static constexpr auto name = "block_number";
bitTestAll.cpp:struct NameBitTestAll { static constexpr auto name = "bit_test_all"; };
dateName.cpp:    static constexpr auto name = "date_name";
multiSearchAllPositions.cpp:    static constexpr auto name = "multi_search_all_positions";
upper.cpp:    static constexpr auto name = "upper";
blockSize.cpp:    static constexpr auto name = "block_size";
demange.cpp:    static constexpr auto name = "demangle";
currentUser.cpp:    static constexpr auto name = "current_user";
visitParamExtractInt.cpp:struct NameVisitParamExtractInt    { static constexpr auto name = "visit_param_extract_int"; };
visitParamExtractInt.cpp:struct NameSimpleJSONExtractInt    { static constexpr auto name = "simple_jsone_xtract_int"; };
exp10.cpp:struct Exp10Name { static constexpr auto name = "exp10"; };
toColumnTypeName.cpp:    static constexpr auto name = "to_column_type_name";
FunctionsConversion.h:struct NameToUnixTimestamp { static constexpr auto name = "to_unix_timestamp"; };
FunctionsConversion.h:    static constexpr auto name = "to_datetime";
FunctionsConversion.h:    static constexpr auto name = "to_date";
FunctionsConversion.h:    static constexpr auto name = "to_date";
FunctionsConversion.h:    static constexpr auto name = "to_date";
FunctionsConversion.h:    static constexpr auto name = "to_date32";
FunctionsConversion.h:    static constexpr auto name = "to_date32";
FunctionsConversion.h:    static constexpr auto name = "to_date32";
FunctionsConversion.h:    static constexpr auto name = "to_datetime";
FunctionsConversion.h:    static constexpr auto name = "to_datetime";
FunctionsConversion.h:    static constexpr auto name = "to_datetime";
FunctionsConversion.h:    static constexpr auto name = "to_datetime64";
FunctionsConversion.h:    static constexpr auto name = "to_datetime64";
FunctionsConversion.h:    static constexpr auto name = "to_datetime64";
FunctionsConversion.h:    static constexpr auto name = Transform::name;
FunctionsConversion.h:    static constexpr auto name = "to_datetime64";
FunctionsConversion.h:struct NameToDate { static constexpr auto name = "to_date"; };
FunctionsConversion.h:struct NameToDate32 { static constexpr auto name = "to_date32"; };
FunctionsConversion.h:struct NameToDateTime { static constexpr auto name = "to_datetime"; };
FunctionsConversion.h:struct NameToDateTime32 { static constexpr auto name = "to_datetime32"; };
FunctionsConversion.h:struct NameToDateTime64 { static constexpr auto name = "to_datetime64"; };
FunctionsConversion.h:struct NameToString { static constexpr auto name = "to_string"; };
FunctionsConversion.h:struct NameToDecimal32 { static constexpr auto name = "to_decimal32"; };
FunctionsConversion.h:struct NameToDecimal64 { static constexpr auto name = "to_decimal64"; };
FunctionsConversion.h:struct NameToDecimal128 { static constexpr auto name = "to_decimal128"; };
FunctionsConversion.h:struct NameToDecimal256 { static constexpr auto name = "to_decimal256"; };
FunctionsConversion.h:        static constexpr auto name = "toInterval" #INTERVAL_KIND; \
FunctionsConversion.h:    static constexpr auto name = Name::name;
FunctionsConversion.h:    static constexpr auto name = Name::name;
FunctionsConversion.h:struct NameToUInt8 { static constexpr auto name = "to_uint8"; };
FunctionsConversion.h:struct NameToUInt16 { static constexpr auto name = "to_uint16"; };
FunctionsConversion.h:struct NameToUInt32 { static constexpr auto name = "to_uint32"; };
FunctionsConversion.h:struct NameToUInt64 { static constexpr auto name = "to_uint64"; };
FunctionsConversion.h:struct NameToUInt128 { static constexpr auto name = "to_uint128"; };
FunctionsConversion.h:struct NameToUInt256 { static constexpr auto name = "to_uint256"; };
FunctionsConversion.h:struct NameToInt8 { static constexpr auto name = "to_int8"; };
FunctionsConversion.h:struct NameToInt16 { static constexpr auto name = "to_int16"; };
FunctionsConversion.h:struct NameToInt32 { static constexpr auto name = "to_int32"; };
FunctionsConversion.h:struct NameToInt64 { static constexpr auto name = "to_int64"; };
FunctionsConversion.h:struct NameToInt128 { static constexpr auto name = "to_int128"; };
FunctionsConversion.h:struct NameToInt256 { static constexpr auto name = "to_int256"; };
FunctionsConversion.h:struct NameToFloat32 { static constexpr auto name = "to_float32"; };
FunctionsConversion.h:struct NameToFloat64 { static constexpr auto name = "to_float64"; };
FunctionsConversion.h:struct NameToUUID { static constexpr auto name = "to_uuid"; };
FunctionsConversion.h:struct NameToUInt8OrZero { static constexpr auto name = "to_uint8_or_zero"; };
FunctionsConversion.h:struct NameToUInt16OrZero { static constexpr auto name = "to_uint16_or_zero"; };
FunctionsConversion.h:struct NameToUInt32OrZero { static constexpr auto name = "to_uint32_or_zero"; };
FunctionsConversion.h:struct NameToUInt64OrZero { static constexpr auto name = "to_uint64_or_zero"; };
FunctionsConversion.h:struct NameToUInt128OrZero { static constexpr auto name = "to_uint128_or_zero"; };
FunctionsConversion.h:struct NameToUInt256OrZero { static constexpr auto name = "to_uint256_or_zero"; };
FunctionsConversion.h:struct NameToInt8OrZero { static constexpr auto name = "to_int8_or_zero"; };
FunctionsConversion.h:struct NameToInt16OrZero { static constexpr auto name = "to_int16_or_zero"; };
FunctionsConversion.h:struct NameToInt32OrZero { static constexpr auto name = "to_int32_or_zero"; };
FunctionsConversion.h:struct NameToInt64OrZero { static constexpr auto name = "to_int64_or_zero"; };
FunctionsConversion.h:struct NameToInt128OrZero { static constexpr auto name = "to_int128_or_zero"; };
FunctionsConversion.h:struct NameToInt256OrZero { static constexpr auto name = "to_int256_or_zero"; };
FunctionsConversion.h:struct NameToFloat32OrZero { static constexpr auto name = "to_float32_or_zero"; };
FunctionsConversion.h:struct NameToFloat64OrZero { static constexpr auto name = "to_float64_or_zero"; };
FunctionsConversion.h:struct NameToDateOrZero { static constexpr auto name = "to_date_or_zero"; };
FunctionsConversion.h:struct NameToDate32OrZero { static constexpr auto name = "to_date32_or_zero"; };
FunctionsConversion.h:struct NameToDateTimeOrZero { static constexpr auto name = "to_datetime_or_zero"; };
FunctionsConversion.h:struct NameToDateTime64OrZero { static constexpr auto name = "to_datetime64_or_zero"; };
FunctionsConversion.h:struct NameToDecimal32OrZero { static constexpr auto name = "to_decimal32_or_zero"; };
FunctionsConversion.h:struct NameToDecimal64OrZero { static constexpr auto name = "to_decimal64_or_zero"; };
FunctionsConversion.h:struct NameToDecimal128OrZero { static constexpr auto name = "to_decimal128_or_zero"; };
FunctionsConversion.h:struct NameToDecimal256OrZero { static constexpr auto name = "to_decimal256_or_zero"; };
FunctionsConversion.h:struct NameToUUIDOrZero { static constexpr auto name = "to_uuido_r_zero"; };
FunctionsConversion.h:struct NameToUInt8OrNull { static constexpr auto name = "to_uint8_or_null"; };
FunctionsConversion.h:struct NameToUInt16OrNull { static constexpr auto name = "to_uint16_or_null"; };
FunctionsConversion.h:struct NameToUInt32OrNull { static constexpr auto name = "to_uint32_or_null"; };
FunctionsConversion.h:struct NameToUInt64OrNull { static constexpr auto name = "to_uint64_or_null"; };
FunctionsConversion.h:struct NameToUInt128OrNull { static constexpr auto name = "to_uint128_or_null"; };
FunctionsConversion.h:struct NameToUInt256OrNull { static constexpr auto name = "to_uint256_or_null"; };
FunctionsConversion.h:struct NameToInt8OrNull { static constexpr auto name = "to_int8_or_null"; };
FunctionsConversion.h:struct NameToInt16OrNull { static constexpr auto name = "to_int16_or_null"; };
FunctionsConversion.h:struct NameToInt32OrNull { static constexpr auto name = "to_int32_or_null"; };
FunctionsConversion.h:struct NameToInt64OrNull { static constexpr auto name = "to_int64_or_null"; };
FunctionsConversion.h:struct NameToInt128OrNull { static constexpr auto name = "to_int128_or_null"; };
FunctionsConversion.h:struct NameToInt256OrNull { static constexpr auto name = "to_int256_or_null"; };
FunctionsConversion.h:struct NameToFloat32OrNull { static constexpr auto name = "to_float32_or_null"; };
FunctionsConversion.h:struct NameToFloat64OrNull { static constexpr auto name = "to_float64_or_null"; };
FunctionsConversion.h:struct NameToDateOrNull { static constexpr auto name = "to_date_or_null"; };
FunctionsConversion.h:struct NameToDate32OrNull { static constexpr auto name = "to_date32_or_null"; };
FunctionsConversion.h:struct NameToDateTimeOrNull { static constexpr auto name = "to_datetime_or_null"; };
FunctionsConversion.h:struct NameToDateTime64OrNull { static constexpr auto name = "to_datetime64_or_null"; };
FunctionsConversion.h:struct NameToDecimal32OrNull { static constexpr auto name = "to_decimal32_or_null"; };
FunctionsConversion.h:struct NameToDecimal64OrNull { static constexpr auto name = "to_decimal64_or_null"; };
FunctionsConversion.h:struct NameToDecimal128OrNull { static constexpr auto name = "to_decimal128_or_null"; };
FunctionsConversion.h:struct NameToDecimal256OrNull { static constexpr auto name = "to_decimal256_or_null"; };
FunctionsConversion.h:struct NameToUUIDOrNull { static constexpr auto name = "to_uuido_r_null"; };
FunctionsConversion.h:struct NameParseDateTimeBestEffort { static constexpr auto name = "parse_datetime_best_effort"; };
FunctionsConversion.h:struct NameParseDateTimeBestEffortOrZero { static constexpr auto name = "parse_datetime_best_effort_or_zero"; };
FunctionsConversion.h:struct NameParseDateTimeBestEffortOrNull { static constexpr auto name = "parse_datetime_best_effort_or_null"; };
FunctionsConversion.h:struct NameParseDateTimeBestEffortUS { static constexpr auto name = "to_time"; };
FunctionsConversion.h:struct NameParseDateTimeBestEffortUSOrZero { static constexpr auto name = "parse_datetime_best_effort_us_or_zero"; };
FunctionsConversion.h:struct NameParseDateTimeBestEffortUSOrNull { static constexpr auto name = "parse_datetime_best_effort_us_or_null"; };
FunctionsConversion.h:struct NameParseDateTime32BestEffort { static constexpr auto name = "parse_datetime32_best_effort"; };
FunctionsConversion.h:struct NameParseDateTime32BestEffortOrZero { static constexpr auto name = "parse_datetime32_best_effort_or_zero"; };
FunctionsConversion.h:struct NameParseDateTime32BestEffortOrNull { static constexpr auto name = "parse_datetime32_best_effort_or_null"; };
FunctionsConversion.h:struct NameParseDateTime64BestEffort { static constexpr auto name = "parse_datetime64_best_effort"; };
FunctionsConversion.h:struct NameParseDateTime64BestEffortOrZero { static constexpr auto name = "parse_datetime64_best_effort_or_zero"; };
FunctionsConversion.h:struct NameParseDateTime64BestEffortOrNull { static constexpr auto name = "parse_datetime64_best_effort_or_null"; };
FunctionsConversion.h:struct CastName { static constexpr auto name = "cast"; };
FunctionsConversion.h:struct CastInternalName { static constexpr auto name = "__cast"; };
visitParamExtractUInt.cpp:struct NameVisitParamExtractUInt   { static constexpr auto name = "visit_param_extract_ui_nt"; };
visitParamExtractUInt.cpp:struct NameSimpleJSONExtractUInt   { static constexpr auto name = "simple_jsone_xtract_ui_nt"; };
MultiSearchFirstIndexImpl.h:    static constexpr auto name = Name::name;
randomPrintableASCII.cpp:    static constexpr auto name = "random_printable_ascii";
empty.cpp:    static constexpr auto name = "empty";
extractGroups.cpp:    static constexpr auto name = "extract_groups";
h3NumHexagons.cpp:    static constexpr auto name = "h3_num_hexagons";
roundDuration.cpp:struct NameRoundDuration { static constexpr auto name = "round_duration"; };
atan2.cpp:        static constexpr auto name = "atan2";
HasTokenImpl.h:    static constexpr auto name = Name::name;
tupleHammingDistance.cpp:    static constexpr auto name = "tuple_hamming_distance";
CastOverloadResolver.h:    static constexpr auto name = cast_type == CastType::accurate
FunctionMathBinaryFloat64.h:    static constexpr auto name = Impl::name;
FunctionMathBinaryFloat64.h:    static constexpr auto name = Name::name;
FunctionsStringSimilarity.cpp:    static constexpr auto name = "ngram_distance";
FunctionsStringSimilarity.cpp:    static constexpr auto name = "ngram_distance_case_insensitive";
FunctionsStringSimilarity.cpp:    static constexpr auto name = "ngram_distance_utf8";
FunctionsStringSimilarity.cpp:    static constexpr auto name = "ngram_distance_case_insensitive_utf8";
FunctionsStringSimilarity.cpp:    static constexpr auto name = "ngram_search";
FunctionsStringSimilarity.cpp:    static constexpr auto name = "ngram_search_case_insensitive";
FunctionsStringSimilarity.cpp:    static constexpr auto name = "ngram_search_utf8";
FunctionsStringSimilarity.cpp:    static constexpr auto name = "ngram_search_case_insensitive_utf8";
hasTokenCaseInsensitive.cpp:    static constexpr auto name = "has_token_case_insensitive";
CRC.cpp:    static constexpr auto name = "crc64";
CRC.cpp:    static constexpr auto name = "crc32_ieee";
CRC.cpp:    static constexpr auto name = "crc32";
generateUUIDv4.cpp:    static constexpr auto name = "generate_uuid_v4";
s2GetNeighbors.cpp:    static constexpr auto name = "s2_get_neighbors";
h3ToString.cpp:    static constexpr auto name = "h3_to_string";
visitParamHas.cpp:struct NameVisitParamHas           { static constexpr auto name = "visit_param_has"; };
visitParamHas.cpp:struct NameSimpleJSONHas           { static constexpr auto name = "simple_jsonh_as"; };
h3ToParent.cpp:    static constexpr auto name = "h3_to_parent";
atan.cpp:struct AtanName { static constexpr auto name = "atan"; };
isFinite.cpp:    static constexpr auto name = "is_finite";
roundToExp2.cpp:struct NameRoundToExp2 { static constexpr auto name = "round_to_exp2"; };
toTimezone.cpp:    static constexpr auto name = "to_timezone";
cosh.cpp:        static constexpr auto name = "cosh";
intDivOrZero.cpp:struct NameIntDivOrZero { static constexpr auto name = "int_div_or_zero"; };
visibleWidth.cpp:    static constexpr auto name = "visible_width";
multiSearchFirstIndexCaseInsensitive.cpp:    static constexpr auto name = "multi_search_first_index_case_insensitive";
cos.cpp:struct CosName { static constexpr auto name = "cos"; };
FunctionsProgrammingClassification.cpp:    static constexpr auto name = "detect_programming_language";
rand.cpp:struct NameRand { static constexpr auto name = "rand"; };
bitRotateRight.cpp:struct NameBitRotateRight { static constexpr auto name = "bit_rotate_right"; };
FunctionsAES.h:    static constexpr auto name = Impl::name;
FunctionsAES.h:    static constexpr auto name = Impl::name;
h3ExactEdgeLengthM.cpp:    static constexpr auto name = "h3_exact_edge_length_m";
FunctionsRandom.h:    static constexpr auto name = Name::name;
tupleElement.cpp:    static constexpr auto name = "tuple_element";
isValidUTF8.cpp:    static constexpr auto name = "is_valid_utf8";
FunctionsConsistentHashing.h:    static constexpr auto name = Impl::name;
sin.cpp:struct SinName { static constexpr auto name = "sin"; };
roundAge.cpp:struct NameRoundAge { static constexpr auto name = "round_age"; };
multiSearchFirstPosition.cpp:    static constexpr auto name = "multi_search_first_position";
padString.cpp:        static constexpr auto name = is_right_pad ? (is_utf8 ? "rightPadUTF8" : "rightPad") : (is_utf8 ? "leftPadUTF8" : "leftPad");
tanh.cpp:struct TanhName { static constexpr auto name = "tanh"; };
tanh.cpp:        static constexpr auto name = TanhName::name;
FunctionsBitToArray.cpp:    static constexpr auto name = "bitmask_to_list";
FunctionsBitToArray.cpp:    static constexpr auto name = "bitmask_to_array";
FunctionsBitToArray.cpp:    static constexpr auto name = "bit_positions_to_array";
rowNumberInAllBlocks.cpp:    static constexpr auto name = "row_number_in_all_blocks";
tan.cpp:struct TanName { static constexpr auto name = "tan"; };
DateTimeTransforms.h:    static constexpr auto name = "to_date";
DateTimeTransforms.h:    static constexpr auto name = "to_date32";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_day";
DateTimeTransforms.h:    static constexpr auto name = "to_monday";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_month";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_quarter";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_year";
DateTimeTransforms.h:    static constexpr auto name = "__to_time";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_minute";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_second";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_five_minute";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_ten_minutes";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_fifteen_minutes";
DateTimeTransforms.h:    static constexpr auto name = "time_slot";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_hour";
DateTimeTransforms.h:    static constexpr auto name = "to_year";
DateTimeTransforms.h:    static constexpr auto name = "to_quarter";
DateTimeTransforms.h:    static constexpr auto name = "to_month";
DateTimeTransforms.h:    static constexpr auto name = "to_day_of_month";
DateTimeTransforms.h:    static constexpr auto name = "to_day_of_week";
DateTimeTransforms.h:    static constexpr auto name = "to_day_of_year";
DateTimeTransforms.h:    static constexpr auto name = "to_hour";
DateTimeTransforms.h:    static constexpr auto name = "timezone_offset";
DateTimeTransforms.h:    static constexpr auto name = "to_minute";
DateTimeTransforms.h:    static constexpr auto name = "to_second";
DateTimeTransforms.h:    static constexpr auto name = "to_iso_year";
DateTimeTransforms.h:    static constexpr auto name = "to_start_of_iso_year";
DateTimeTransforms.h:    static constexpr auto name = "to_iso_week";
DateTimeTransforms.h:    static constexpr auto name = "to_relative_year_num";
DateTimeTransforms.h:    static constexpr auto name = "to_relative_quarter_num";
DateTimeTransforms.h:    static constexpr auto name = "to_relative_month_num";
DateTimeTransforms.h:    static constexpr auto name = "to_relative_week_num";
DateTimeTransforms.h:    static constexpr auto name = "to_relative_day_num";
DateTimeTransforms.h:    static constexpr auto name = "to_relative_hour_num";
DateTimeTransforms.h:    static constexpr auto name = "to_relative_minute_num";
DateTimeTransforms.h:    static constexpr auto name = "to_relative_second_num";
DateTimeTransforms.h:    static constexpr auto name = "to_YYYYMM";
DateTimeTransforms.h:    static constexpr auto name = "to_YYYYMMDD";
DateTimeTransforms.h:    static constexpr auto name = "to_YYYYMMDDhhmmss";
toLowCardinality.cpp:    static constexpr auto name = "to_low_cardinality";
formatDateTime.cpp:    static constexpr auto name = Name::name;
formatDateTime.cpp:    static constexpr auto name = "format_datetime";
formatDateTime.cpp:    static constexpr auto name = "from_unix_time";
negate.cpp:struct NameNegate { static constexpr auto name = "negate"; };
FunctionStartsEndsWith.h:    static constexpr auto name = "starts_with";
FunctionStartsEndsWith.h:    static constexpr auto name = "ends_with";
FunctionStartsEndsWith.h:    static constexpr auto name = Name::name;
multiFuzzyMatchAllIndices.cpp:    static constexpr auto name = "multi_fuzzy_match_all_indices";
normalizedQueryHash.cpp:    static constexpr auto name = keep_names ? "normalizedQueryHashKeepNames" : "normalizedQueryHash";
countMatches.cpp:    static constexpr auto name = "count_matches";
countMatches.cpp:    static constexpr auto name = "count_matches_case_insensitive";
FunctionsExternalDictionaries.h:    static constexpr auto name = "dict_has";
FunctionsExternalDictionaries.h:    static constexpr auto name = dictionary_get_function_type == DictionaryGetFunctionType::get ? "dictGet" : "dictGetOrDefault";
FunctionsExternalDictionaries.h:    static constexpr auto name = Name::name;
FunctionsExternalDictionaries.h:struct NameDictGetUInt8 { static constexpr auto name = "dict_get_uint8"; };
FunctionsExternalDictionaries.h:struct NameDictGetUInt16 { static constexpr auto name = "dict_get_uint16"; };
FunctionsExternalDictionaries.h:struct NameDictGetUInt32 { static constexpr auto name = "dict_get_uint32"; };
FunctionsExternalDictionaries.h:struct NameDictGetUInt64 { static constexpr auto name = "dict_get_uint64"; };
FunctionsExternalDictionaries.h:struct NameDictGetInt8 { static constexpr auto name = "dict_get_int8"; };
FunctionsExternalDictionaries.h:struct NameDictGetInt16 { static constexpr auto name = "dict_get_int16"; };
FunctionsExternalDictionaries.h:struct NameDictGetInt32 { static constexpr auto name = "dict_get_int32"; };
FunctionsExternalDictionaries.h:struct NameDictGetInt64 { static constexpr auto name = "dict_get_int64"; };
FunctionsExternalDictionaries.h:struct NameDictGetFloat32 { static constexpr auto name = "dict_get_float32"; };
FunctionsExternalDictionaries.h:struct NameDictGetFloat64 { static constexpr auto name = "dict_get_float64"; };
FunctionsExternalDictionaries.h:struct NameDictGetDate { static constexpr auto name = "dict_get_date"; };
FunctionsExternalDictionaries.h:struct NameDictGetDateTime { static constexpr auto name = "dict_get_datetime"; };
FunctionsExternalDictionaries.h:struct NameDictGetUUID { static constexpr auto name = "dict_get_uuid"; };
FunctionsExternalDictionaries.h:struct NameDictGetDecimal32 { static constexpr auto name = "dict_get_decimal32"; };
FunctionsExternalDictionaries.h:struct NameDictGetDecimal64 { static constexpr auto name = "dict_get_decimal64"; };
FunctionsExternalDictionaries.h:struct NameDictGetDecimal128 { static constexpr auto name = "dict_get_decimal128"; };
FunctionsExternalDictionaries.h:struct NameDictGetString { static constexpr auto name = "dict_get_string"; };
FunctionsExternalDictionaries.h:struct NameDictGetUInt8OrDefault { static constexpr auto name = "dict_get_uint8_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetUInt16OrDefault { static constexpr auto name = "dict_get_uint16_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetUInt32OrDefault { static constexpr auto name = "dict_get_uint32_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetUInt64OrDefault { static constexpr auto name = "dict_get_uint64_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetInt8OrDefault { static constexpr auto name = "dict_get_int8_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetInt16OrDefault { static constexpr auto name = "dict_get_int16_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetInt32OrDefault { static constexpr auto name = "dict_get_int32_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetInt64OrDefault { static constexpr auto name = "dict_get_int64_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetFloat32OrDefault { static constexpr auto name = "dict_get_float32_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetFloat64OrDefault { static constexpr auto name = "dict_get_float64_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetDateOrDefault { static constexpr auto name = "dict_get_date_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetDateTimeOrDefault { static constexpr auto name = "dict_get_datetime_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetUUIDOrDefault { static constexpr auto name = "dict_get_uuid_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetDecimal32OrDefault { static constexpr auto name = "dict_get_decimal32_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetDecimal64OrDefault { static constexpr auto name = "dict_get_decimal64_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetDecimal128OrDefault { static constexpr auto name = "dict_get_decimal128_or_default"; };
FunctionsExternalDictionaries.h:struct NameDictGetStringOrDefault { static constexpr auto name = "dict_get_string_or_default"; };
FunctionsExternalDictionaries.h:    static constexpr auto name = "dict_get_or_null";
FunctionsExternalDictionaries.h:    static constexpr auto name = "dict_get_hierarchy";
FunctionsExternalDictionaries.h:    static constexpr auto name = "dict_is_in";
FunctionsExternalDictionaries.h:    static constexpr auto name = "dict_get_children";
FunctionsExternalDictionaries.h:    static constexpr auto name = "dict_get_descendants";
MultiMatchAnyImpl.h:    static constexpr auto name = Name::name;
atanh.cpp:        static constexpr auto name = "atanh";
getSizeOfEnumType.cpp:    static constexpr auto name = "get_size_of_enum_type";
multiSearchFirstPositionCaseInsensitive.cpp:    static constexpr auto name = "multi_search_first_position_case_insensitive";
getMacro.cpp:    static constexpr auto name = "get_macro";
initialQueryID.cpp:    static constexpr auto name = "initial_query_id";
initializeAggregation.cpp:    static constexpr auto name = "initialize_aggregation";
partitionId.cpp:    static constexpr auto name = "partition_id";
intDiv.cpp:struct NameIntDiv { static constexpr auto name = "int_div"; };
formatString.cpp:    static constexpr auto name = Name::name;
formatString.cpp:    static constexpr auto name = "format";
FunctionUnaryArithmetic.h:    static constexpr auto name = Name::name;
radians.cpp:        static constexpr auto name = "radians";
FunctionChar.cpp:    static constexpr auto name = "char";
h3ExactEdgeLengthKm.cpp:    static constexpr auto name = "h3_exact_edge_length_km";
modulo.cpp:struct NameModulo { static constexpr auto name = "modulo"; };
modulo.cpp:struct NameModuloLegacy { static constexpr auto name = "modulo_legacy"; };
defaultValueOfTypeName.cpp:    static constexpr auto name = "default_value_of_type_name";
h3IsValid.cpp:    static constexpr auto name = "h3_is_valid";
tupleToNameValuePairs.cpp:    static constexpr auto name = "tuple_to_name_value_pairs";
FunctionMathUnary.h:    static constexpr auto name = Impl::name;
FunctionMathUnary.h:    static constexpr auto name = Name::name;
hasColumnInTable.cpp:    static constexpr auto name = "has_column_in_table";
tid.cpp:        static constexpr auto name = "tid";
formatReadableTimeDelta.cpp:    static constexpr auto name = "format_readable_time_delta";
h3IsResClassIII.cpp:    static constexpr auto name = "h3_is_res_class_iii";
blockSerializedSize.cpp:    static constexpr auto name = "block_serialized_size";
bitBoolMaskOr.cpp:struct NameBitBoolMaskOr { static constexpr auto name = "__bit_bool_mask_or"; };
FunctionDateOrDateTimeToSomething.h:    static constexpr auto name = Transform::name;
isInfinite.cpp:    static constexpr auto name = "is_infinite";
pow.cpp:struct PowName { static constexpr auto name = "pow"; };
TransformDateTime64.h:    static constexpr auto name = Transform::name;
multiIf.cpp:    static constexpr auto name = "multi_if";
vectorFunctions.cpp:struct PlusName { static constexpr auto name = "plus"; };
vectorFunctions.cpp:struct MinusName { static constexpr auto name = "minus"; };
vectorFunctions.cpp:struct MultiplyName { static constexpr auto name = "multiply"; };
vectorFunctions.cpp:struct DivideName { static constexpr auto name = "divide"; };
vectorFunctions.cpp:struct L1Label { static constexpr auto name = "1"; };
vectorFunctions.cpp:struct L2Label { static constexpr auto name = "2"; };
vectorFunctions.cpp:struct LinfLabel { static constexpr auto name = "inf"; };
vectorFunctions.cpp:struct LpLabel { static constexpr auto name = "p"; };
vectorFunctions.cpp:    static constexpr auto name = "tuple_negate";
vectorFunctions.cpp:    static constexpr auto name = "dot_product";
vectorFunctions.cpp:    static constexpr auto name = "l1_norm";
vectorFunctions.cpp:    static constexpr auto name = "l2_norm";
vectorFunctions.cpp:    static constexpr auto name = "linf_norm";
vectorFunctions.cpp:    static constexpr auto name = "lp_norm";
multiSearchAny.cpp:    static constexpr auto name = "multi_search_any";
FunctionsJSON.cpp:    static constexpr auto name = Name::name;
s2ToGeo.cpp:    static constexpr auto name = "s2_to_geo";
coalesce.cpp:    static constexpr auto name = "coalesce";
upperUTF8.cpp:    static constexpr auto name = "upper_utf8";
FunctionSQLJSON.h:    static constexpr auto name = Name::name;
least.cpp:struct NameLeast { static constexpr auto name = "least"; };
h3GetFaces.cpp:    static constexpr auto name = "h3_get_faces";
multiMatchAnyIndex.cpp:    static constexpr auto name = "multi_match_any_index";
match.cpp:    static constexpr auto name = "match";
trap.cpp:    static constexpr auto name = "trap";
map.cpp:    static constexpr auto name = "map";
map.cpp:struct NameMapContains { static constexpr auto name = "map_contains"; };
map.cpp:    static constexpr auto name = NameMapContains::name;
map.cpp:    static constexpr auto name = "map_keys";
map.cpp:    static constexpr auto name = "map_values";
map.cpp:    static constexpr auto name = "map_contains_key_like";
map.cpp:    static constexpr auto name = "map_extract_key_like";
replicate.h:    static constexpr auto name = "replicate";
FunctionsCodingUUID.cpp:    static constexpr auto name = "uuid_num_to_string";
FunctionsCodingUUID.cpp:    static constexpr auto name = "uuid_string_to_num";
pointInEllipses.cpp:    static constexpr auto name = "point_in_ellipses";
queryID.cpp:    static constexpr auto name = "query_id";
divide.cpp:struct NameDivide { static constexpr auto name = "divide"; };
FunctionJoinGet.h:    static constexpr auto name = or_null ? "joinGetOrNull" : "joinGet";
FunctionJoinGet.h:    static constexpr auto name = or_null ? "joinGetOrNull" : "joinGet";
FunctionJoinGet.h:    static constexpr auto name = or_null ? "joinGetOrNull" : "joinGet";
nullIf.cpp:    static constexpr auto name = "null_if";
h3CellAreaRads2.cpp:    static constexpr auto name = "h3_cell_area_rads2";
addressToLine.cpp:    static constexpr auto name = "address_to_line";
bitTest.cpp:struct NameBitTest { static constexpr auto name = "bit_test"; };
sleep.h:    static constexpr auto name = variant == FunctionSleepVariant::PerBlock ? "sleep" : "sleepEachRow";
bitAnd.cpp:struct NameBitAnd { static constexpr auto name = "bit_and"; };
randomStringUTF8.cpp:    static constexpr auto name = "random_string_utf8";
FunctionStringReplace.h:    static constexpr auto name = Name::name;
today.cpp:    static constexpr auto name = "today";
FunctionsTextClassification.h:    static constexpr auto name = Name::name;
FunctionsTextClassification.h:    static constexpr auto name = Name::name;
FunctionsStringHash.h:    static constexpr auto name = Name::name;
multiSearchFirstIndexUTF8.cpp:    static constexpr auto name = "multi_search_first_index_utf8";
geohashEncode.cpp:    static constexpr auto name = "geohash_encode";
toFixedString.h:    static constexpr auto name = "to_fixed_string";
replaceRegexpAll.cpp:    static constexpr auto name = "replace_regexp_all";
min2.cpp:        static constexpr auto name = "min2";
FunctionFQDN.cpp:    static constexpr auto name = "fqdn";
s2CapContains.cpp:    static constexpr auto name = "s2_cap_contains";
array/arrayAUC.cpp:    static constexpr auto name = "array_auc";
FunctionsMultiStringPosition.h:    static constexpr auto name = Name::name;
PositionImpl.h:    static constexpr auto name = Name::name;
toBool.cpp:        static constexpr auto name = "to_bool";
array/indexOf.cpp:struct NameIndexOf { static constexpr auto name = "index_of"; };
array/arrayElement.cpp:    static constexpr auto name = "array_element";
getSetting.cpp:    static constexpr auto name = "get_setting";
notILike.cpp:    static constexpr auto name = "not_ilike";
array/FunctionArrayMapped.h:    static constexpr auto name = Name::name;
isNotNull.cpp:    static constexpr auto name = "is_not_null";
plus.cpp:struct NamePlus { static constexpr auto name = "plus"; };
currentDatabase.cpp:    static constexpr auto name = "current_database";
tgamma.cpp:struct TGammaName { static constexpr auto name = "tgamma"; };
assumeNotNull.cpp:    static constexpr auto name = "assume_not_null";
FunctionsMultiStringFuzzySearch.h:    static constexpr auto name = Impl::name;
array/arrayFirstLastIndex.cpp:struct NameArrayFirstIndex { static constexpr auto name = "array_first_index"; };
array/arrayFirstLastIndex.cpp:struct NameArrayLastIndex { static constexpr auto name = "array_last_index"; };
in.cpp:template <> struct FunctionInName<false, false, true, false> { static constexpr auto name = "in"; };
in.cpp:template <> struct FunctionInName<false, true, true, false> { static constexpr auto name = "global_in"; };
in.cpp:template <> struct FunctionInName<true, false, true, false> { static constexpr auto name = "not_in"; };
in.cpp:template <> struct FunctionInName<true, true, true, false> { static constexpr auto name = "global_not_in"; };
in.cpp:template <> struct FunctionInName<false, false, false, false> { static constexpr auto name = "null_in"; };
in.cpp:template <> struct FunctionInName<false, true, false, false> { static constexpr auto name = "global_null_in"; };
in.cpp:template <> struct FunctionInName<true, false, false, false> { static constexpr auto name = "not_null_in"; };
in.cpp:template <> struct FunctionInName<true, true, false, false> { static constexpr auto name = "global_not_null_in"; };
in.cpp:template <> struct FunctionInName<false, false, true, true> { static constexpr auto name = "in_ignore_set"; };
in.cpp:template <> struct FunctionInName<false, true, true, true> { static constexpr auto name = "global_in_ignore_set"; };
in.cpp:template <> struct FunctionInName<true, false, true, true> { static constexpr auto name = "not_in_ignore_set"; };
in.cpp:template <> struct FunctionInName<true, true, true, true> { static constexpr auto name = "global_not_in_ignore_set"; };
in.cpp:template <> struct FunctionInName<false, false, false, true> { static constexpr auto name = "null_in_ignore_set"; };
in.cpp:template <> struct FunctionInName<false, true, false, true> { static constexpr auto name = "global_null_in_ignore_set"; };
in.cpp:template <> struct FunctionInName<true, false, false, true> { static constexpr auto name = "not_null_in_ignore_set"; };
in.cpp:template <> struct FunctionInName<true, true, false, true> { static constexpr auto name = "global_not_null_in_ignore_set"; };
in.cpp:    static constexpr auto name = FunctionInName<negative, global, null_is_skipped, ignore_set>::name;
LeftRight.h:    static constexpr auto name = direction == SubstringDirection::Left
visitParamExtractString.cpp:struct NameVisitParamExtractString { static constexpr auto name = "visit_param_extract_string"; };
visitParamExtractString.cpp:struct NameSimpleJSONExtractString { static constexpr auto name = "simple_json_extract_string"; };
array/arrayResize.cpp:    static constexpr auto name = "array_resize";
array/arrayFlatten.cpp:    static constexpr auto name = "array_flatten";
array/length.cpp:    static constexpr auto name = "length";
toValidUTF8.cpp:    static constexpr auto name = "to_valid_utf8";
array/arrayExists.cpp:struct NameArrayExists { static constexpr auto name = "array_exists"; };
FunctionsMultiStringSearch.h:    static constexpr auto name = Impl::name;
array/range.cpp:    static constexpr auto name = "range";
array/arrayEnumerateUniq.cpp:    static constexpr auto name = "array_enumerate_uniq";
array/arrayCumSum.cpp:struct NameArrayCumSum { static constexpr auto name = "array_cum_sum"; };
array/arrayFirst.cpp:struct NameArrayFirst { static constexpr auto name = "array_first"; };
array/arrayFirst.cpp:struct NameArrayLast { static constexpr auto name = "array_last"; };
array/hasAny.cpp:    static constexpr auto name = "has_any";
array/arrayPushFront.cpp:    static constexpr auto name = "array_push_front";
multiFuzzyMatchAnyIndex.cpp:    static constexpr auto name = "multi_fuzzy_match_any_index";
array/arrayFill.cpp:struct NameArrayFill { static constexpr auto name = "array_fill"; };
array/arrayFill.cpp:struct NameArrayReverseFill { static constexpr auto name = "array_reverse_fill"; };
array/arrayZip.cpp:    static constexpr auto name = "array_zip";
array/arrayIntersect.cpp:    static constexpr auto name = "array_intersect";
multiSearchAllPositionsCaseInsensitive.cpp:    static constexpr auto name = "multi_search_all_positions_case_insensitive";
array/arrayCumSumNonNegative.cpp:struct NameArrayCumSumNonNegative { static constexpr auto name = "array_cum_sum_non_negative"; };
array/arrayEnumerate.cpp:    static constexpr auto name = "array_enumerate";
array/arrayScalarProduct.h:    static constexpr auto name = Name::name;
array/arrayAggregation.cpp:struct NameArrayMin { static constexpr auto name = "array_min"; };
array/arrayAggregation.cpp:struct NameArrayMax { static constexpr auto name = "array_max"; };
array/arrayAggregation.cpp:struct NameArraySum { static constexpr auto name = "array_sum"; };
array/arrayAggregation.cpp:struct NameArrayAverage { static constexpr auto name = "array_avg"; };
array/arrayAggregation.cpp:struct NameArrayProduct { static constexpr auto name = "array_product"; };
array/arrayUniq.cpp:    static constexpr auto name = "array_uniq";
FunctionsStringSearchToString.h:    static constexpr auto name = Name::name;
array/array.cpp:    static constexpr auto name = "array";
degrees.cpp:        static constexpr auto name = "degrees";
array/arraySlice.cpp:    static constexpr auto name = "array_slice";
repeat.cpp:    static constexpr auto name = "repeat";
array/arraySplit.cpp:struct NameArraySplit { static constexpr auto name = "array_split"; };
array/arraySplit.cpp:struct NameArrayReverseSplit { static constexpr auto name = "array_reverse_split"; };
array/hasAll.cpp:    static constexpr auto name = "has_all";
array/arrayMap.cpp:struct NameArrayMap { static constexpr auto name = "array_map"; };
array/arrayWithConstant.cpp:    static constexpr auto name = "array_with_constant";
MatchImpl.h:    static constexpr auto name = Name::name;
array/arrayEnumerateDense.cpp:    static constexpr auto name = "array_enumerate_dense";
lowCardinalityKeys.cpp:    static constexpr auto name = "low_cardinality_keys";
bitHammingDistance.cpp:    static constexpr auto name = "bit_hamming_distance";
positionUTF8.cpp:    static constexpr auto name = "position_utf8";
array/arrayCount.cpp:struct NameArrayCount { static constexpr auto name = "array_count"; };
isIPAddressContainedIn.cpp:        static constexpr auto name = "is_ip_address_in_range";
array/arrayPopFront.cpp:    static constexpr auto name = "array_pop_front";
lowCardinalityIndices.cpp:    static constexpr auto name = "low_cardinality_indices";
FunctionNumericPredicate.h:    static constexpr auto name = Impl::name;
FunctionsCharsetClassification.cpp:    static constexpr auto name = "detect_charset";
FunctionsCharsetClassification.cpp:    static constexpr auto name = "detect_language_unknown";
array/arrayReverse.cpp:    static constexpr auto name = "array_reverse";
countSubstringsCaseInsensitiveUTF8.cpp:    static constexpr auto name = "count_substrings_case_insensitive_utf8";
array/has.cpp:struct NameHas { static constexpr auto name = "has"; };
multiSearchFirstIndex.cpp:    static constexpr auto name = "multi_search_first_index";
array/arrayCompact.cpp:struct NameArrayCompact { static constexpr auto name = "array_compact"; };
array/arrayJoin.cpp:    static constexpr auto name = "array_join";
CountSubstringsImpl.h:    static constexpr auto name = Name::name;
array/arrayPushBack.cpp:    static constexpr auto name = "array_push_back";
gcd.cpp:struct NameGCD { static constexpr auto name = "gcd"; };
array/mapOp.cpp:    static constexpr auto name = (op_type == OpTypes::ADD) ? "mapAdd" : "mapSubtract";
array/arrayReduceInRanges.cpp:    static constexpr auto name = "array_reduce_in_ranges";
array/arraySort.cpp:struct NameArraySort { static constexpr auto name = "array_sort"; };
array/arraySort.cpp:struct NameArrayReverseSort { static constexpr auto name = "array_reverse_sort"; };
FunctionsVisitParam.h:    static constexpr auto name = Name::name;
logTrace.cpp:        static constexpr auto name = "log_trace";
array/arrayDifference.cpp:struct NameArrayDifference { static constexpr auto name = "array_difference"; };
array/arrayPopBack.cpp:    static constexpr auto name = "array_pop_back";
indexHint.cpp:    static constexpr auto name = "index_hint";
validateNestedArraySizes.cpp:    static constexpr auto name = "validate_nested_array_sizes";
array/arrayEnumerateDenseRanked.cpp:    static constexpr auto name = "array_enumerate_dense_ranked";
array/arrayConcat.cpp:    static constexpr auto name = "array_concat";
formatReadableSize.cpp:        static constexpr auto name = "format_readable_size";
array/arrayAll.cpp:struct NameArrayAll { static constexpr auto name = "array_all"; };
array/arrayIndex.h:    static constexpr auto name = Name::name;
h3toGeo.cpp:    static constexpr auto name = "h3_to_geo";
array/arrayEnumerateUniqRanked.cpp:    static constexpr auto name = "array_enumerate_uniq_ranked";
array/arrayFilter.cpp:struct NameArrayFilter { static constexpr auto name = "array_filter"; };
bitCount.cpp:struct NameBitCount { static constexpr auto name = "bit_count"; };
randomString.cpp:    static constexpr auto name = "random_string";
array/arrayDistinct.cpp:    static constexpr auto name = "array_distinct";
array/countEqual.cpp:struct NameCountEqual { static constexpr auto name = "count_equal"; };
bitTestAny.cpp:struct NameBitTestAny { static constexpr auto name = "bit_test_any"; };
s2RectAdd.cpp:    static constexpr auto name = "s2_rect_add";
countSubstringsCaseInsensitive.cpp:    static constexpr auto name = "count_substrings_case_insensitive";
array/emptyArrayToSingle.cpp:    static constexpr auto name = "empty_array_to_single";
FunctionBinaryArithmetic.h:    static constexpr auto name = Name::name;
FunctionBinaryArithmetic.h:    static constexpr auto name = Name::name;
FunctionsLanguageClassification.cpp:    static constexpr auto name = "detect_language_mixed";
FunctionsLanguageClassification.cpp:    static constexpr auto name = "detect_language";
isDecimalOverflow.cpp:    static constexpr auto name = "is_decimal_overflow";
finalizeAggregation.cpp:    static constexpr auto name = "finalize_aggregation";
like.h:    static constexpr auto name = "like";
FunctionsStringSimilarity.h:    static constexpr auto name = Name::name;
formatReadable.h:    static constexpr auto name = Impl::name;
randomFixedString.cpp:    static constexpr auto name = "random_fixed_string";
synonyms.cpp:    static constexpr auto name = "synonyms";
encrypt.cpp:    static constexpr auto name = "encrypt";
notLike.cpp:    static constexpr auto name = "not_like";
LeastGreatestGeneric.h:    static constexpr auto name = kind == LeastGreatest::Least ? "least" : "greatest";
LeastGreatestGeneric.h:    static constexpr auto name = kind == LeastGreatest::Least ? "least" : "greatest";
runningDifference.h:    static constexpr auto name = "running_difference";
runningDifference.h:    static constexpr auto name = "running_difference_starting_with_first_value";
runningDifference.h:    static constexpr auto name = FunctionRunningDifferenceName<is_first_line_zero>::name;
array/hasSubstr.cpp:    static constexpr auto name = "has_substr";
intExp10.cpp:struct NameIntExp10 { static constexpr auto name = "int_exp10"; };
toModifiedJulianDay.cpp:        static constexpr auto name = Name::name;
toModifiedJulianDay.cpp:        static constexpr auto name = "to_modified_julian_day";
toModifiedJulianDay.cpp:        static constexpr auto name = "to_modified_julian_day_or_null";
bar.cpp:    static constexpr auto name = "bar";
array/arrayReduce.cpp:    static constexpr auto name = "array_reduce";
array/mapPopulateSeries.cpp:    static constexpr auto name = "map_populate_series";
FunctionsHashing.h:    static constexpr auto name = "half_md5";
FunctionsHashing.h:    static constexpr auto name = "md4";
FunctionsHashing.h:    static constexpr auto name = "md5";
FunctionsHashing.h:    static constexpr auto name = "sha1";
FunctionsHashing.h:    static constexpr auto name = "sha224";
FunctionsHashing.h:    static constexpr auto name = "sha256";
FunctionsHashing.h:    static constexpr auto name = "sha384";
FunctionsHashing.h:    static constexpr auto name = "sha512";
FunctionsHashing.h:    static constexpr auto name = "sip_hash64";
FunctionsHashing.h:    static constexpr auto name = "sip_hash128";
FunctionsHashing.h:    static constexpr auto name = "murmur_hash2_32";
FunctionsHashing.h:    static constexpr auto name = "murmur_hash2_64";
FunctionsHashing.h:    static constexpr auto name = "gcc_murmur_hash";
FunctionsHashing.h:    static constexpr auto name = "murmur_hash3_32";
FunctionsHashing.h:    static constexpr auto name = "murmur_hash3_64";
FunctionsHashing.h:    static constexpr auto name = "murmur_hash3_128";
FunctionsHashing.h:    static constexpr auto name = "java_hash";
FunctionsHashing.h:    static constexpr auto name = "java_hash_utf16_le";
FunctionsHashing.h:    static constexpr auto name = "hive_hash";
FunctionsHashing.h:    static constexpr auto name = "city_hash64";
FunctionsHashing.h:    static constexpr auto name = "farm_fingerprint64";
FunctionsHashing.h:    static constexpr auto name = "farm_hash64";
FunctionsHashing.h:    static constexpr auto name = "metro_hash64";
FunctionsHashing.h:    static constexpr auto name = "xx_hash32";
FunctionsHashing.h:    static constexpr auto name = "xx_hash64";
FunctionsHashing.h:    static constexpr auto name = Impl::name;
FunctionsHashing.h:    static constexpr auto name = Name::name;
FunctionsHashing.h:    static constexpr auto name = Impl::name;
FunctionsHashing.h:    static constexpr auto name = "url_hash";
FunctionsHashing.h:struct NameIntHash32 { static constexpr auto name = "int_hash32"; };
FunctionsHashing.h:struct NameIntHash64 { static constexpr auto name = "int_hash64"; };
max2.cpp:        static constexpr auto name = "max2";
h3GetResolution.cpp:    static constexpr auto name = "h3_get_resolution";
intExp2.cpp:struct NameIntExp2 { static constexpr auto name = "int_exp2"; };
date_trunc.cpp:    static constexpr auto name = "date_trunc";
geohashesInBox.cpp:    static constexpr auto name = "geohashes_in_box";
bitXor.cpp:struct NameBitXor { static constexpr auto name = "bit_xor"; };
CustomWeekTransforms.h:    static constexpr auto name = "to_year_week";
CustomWeekTransforms.h:    static constexpr auto name = "to_start_of_week";
CustomWeekTransforms.h:    static constexpr auto name = "to_week";
lgamma.cpp:struct LGammaName { static constexpr auto name = "lgamma"; };
minus.cpp:struct NameMinus { static constexpr auto name = "minus"; };
sigmoid.cpp:struct SigmoidName { static constexpr auto name = "sigmoid"; };
sigmoid.cpp:        static constexpr auto name = SigmoidName::name;
normalizeQuery.cpp:    static constexpr auto name = keep_names ? "normalizeQueryKeepNames" : "normalizeQuery";
toJSONString.cpp:        static constexpr auto name = "to_jsons_tring";
h3HexAreaKm2.cpp:    static constexpr auto name = "h3_hex_area_km2";
lengthUTF8.cpp:    static constexpr auto name = "length_utf8";
FunctionsLogical.h:struct NameAnd { static constexpr auto name = "and"; };
FunctionsLogical.h:struct NameOr { static constexpr auto name = "or"; };
FunctionsLogical.h:struct NameXor { static constexpr auto name = "xor"; };
FunctionsLogical.h:struct NameNot { static constexpr auto name = "not"; };
FunctionsLogical.h:    static constexpr auto name = Name::name;
FunctionsLogical.h:    static constexpr auto name = Name::name;
multiSearchAnyUTF8.cpp:    static constexpr auto name = "multi_search_any_utf8";
connectionId.cpp:    static constexpr auto name = "connection_id";
ignore.cpp:    static constexpr auto name = "ignore";
reverseUTF8.cpp:    static constexpr auto name = "reverse_utf8";
yesterday.cpp:    static constexpr auto name = "yesterday";
h3HexAreaM2.cpp:    static constexpr auto name = "h3_hex_area_m2";
multiMatchAny.cpp:    static constexpr auto name = "multi_match_any";
ilike.cpp:    static constexpr auto name = "ilike";
substring.cpp:    static constexpr auto name = is_utf8 ? "substringUTF8" : "substring";
timeSlots.cpp:    static constexpr auto name = "time_slots";
isConstant.cpp:    static constexpr auto name = "is_constant";
h3CellAreaM2.cpp:    static constexpr auto name = "h3_cell_area_m2";
tokenExtractors.cpp:    static constexpr auto name = strategy == ngrams ? "ngrams" : "tokens";
errorCodeToName.cpp:    static constexpr auto name = "error_code_to_name";
extract.cpp:    static constexpr auto name = "extract";
castOrDefault.cpp:    static constexpr auto name = "accurate_cast_or_default";
castOrDefault.cpp:    static constexpr auto name = Name::name;
castOrDefault.cpp:struct NameToUInt8OrDefault { static constexpr auto name = "to_uint8_or_default"; };
castOrDefault.cpp:struct NameToUInt16OrDefault { static constexpr auto name = "to_uint16_or_default"; };
castOrDefault.cpp:struct NameToUInt32OrDefault { static constexpr auto name = "to_uint32_or_default"; };
castOrDefault.cpp:struct NameToUInt64OrDefault { static constexpr auto name = "to_uint64_or_default"; };
castOrDefault.cpp:struct NameToUInt256OrDefault { static constexpr auto name = "to_uint256_or_default"; };
castOrDefault.cpp:struct NameToInt8OrDefault { static constexpr auto name = "to_int8_or_default"; };
castOrDefault.cpp:struct NameToInt16OrDefault { static constexpr auto name = "to_int16_or_default"; };
castOrDefault.cpp:struct NameToInt32OrDefault { static constexpr auto name = "to_int32_or_default"; };
castOrDefault.cpp:struct NameToInt64OrDefault { static constexpr auto name = "to_int64_or_default"; };
castOrDefault.cpp:struct NameToInt128OrDefault { static constexpr auto name = "to_int128_or_default"; };
castOrDefault.cpp:struct NameToInt256OrDefault { static constexpr auto name = "to_int256_or_default"; };
castOrDefault.cpp:struct NameToFloat32OrDefault { static constexpr auto name = "to_float32_or_default"; };
castOrDefault.cpp:struct NameToFloat64OrDefault { static constexpr auto name = "to_float64_or_default"; };
castOrDefault.cpp:struct NameToDateOrDefault { static constexpr auto name = "to_date_or_default"; };
castOrDefault.cpp:struct NameToDate32OrDefault { static constexpr auto name = "to_date32_or_default"; };
castOrDefault.cpp:struct NameToDateTimeOrDefault { static constexpr auto name = "to_datetime_or_default"; };
castOrDefault.cpp:struct NameToDateTime64OrDefault { static constexpr auto name = "to_datetime64_or_default"; };
castOrDefault.cpp:struct NameToDecimal32OrDefault { static constexpr auto name = "to_decimal32_or_default"; };
castOrDefault.cpp:struct NameToDecimal64OrDefault { static constexpr auto name = "to_decimal64_or_default"; };
castOrDefault.cpp:struct NameToDecimal128OrDefault { static constexpr auto name = "to_decimal128_or_default"; };
castOrDefault.cpp:struct NameToDecimal256OrDefault { static constexpr auto name = "to_decimal256_or_default"; };
castOrDefault.cpp:struct NameToUUIDOrDefault { static constexpr auto name = "to_uuid_or_default"; };
modelEvaluate.cpp:    static constexpr auto name = "model_evaluate";
yandexConsistentHash.cpp:    static constexpr auto name = "yandex_consistent_hash";
regexpQuoteMeta.cpp:    static constexpr auto name = "regexp_quote_meta";
formatReadableQuantity.cpp:        static constexpr auto name = "format_readable_quantity";
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = "add_seconds";
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = "add_minutes";
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = "add_hours";
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = "add_days";
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = "add_weeks";
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = "add_months";
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = "add_quarters";
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = "add_years";
FunctionDateOrDateTimeAddInterval.h:struct SubtractSecondsImpl : SubtractIntervalImpl<AddSecondsImpl> { static constexpr auto name = "subtract_seconds"; };
FunctionDateOrDateTimeAddInterval.h:struct SubtractMinutesImpl : SubtractIntervalImpl<AddMinutesImpl> { static constexpr auto name = "subtract_minutes"; };
FunctionDateOrDateTimeAddInterval.h:struct SubtractHoursImpl : SubtractIntervalImpl<AddHoursImpl> { static constexpr auto name = "subtract_hours"; };
FunctionDateOrDateTimeAddInterval.h:struct SubtractDaysImpl : SubtractIntervalImpl<AddDaysImpl> { static constexpr auto name = "subtract_days"; };
FunctionDateOrDateTimeAddInterval.h:struct SubtractWeeksImpl : SubtractIntervalImpl<AddWeeksImpl> { static constexpr auto name = "subtract_weeks"; };
FunctionDateOrDateTimeAddInterval.h:struct SubtractMonthsImpl : SubtractIntervalImpl<AddMonthsImpl> { static constexpr auto name = "subtract_months"; };
FunctionDateOrDateTimeAddInterval.h:struct SubtractQuartersImpl : SubtractIntervalImpl<AddQuartersImpl> { static constexpr auto name = "subtract_quarters"; };
FunctionDateOrDateTimeAddInterval.h:struct SubtractYearsImpl : SubtractIntervalImpl<AddYearsImpl> { static constexpr auto name = "subtract_years"; };
FunctionDateOrDateTimeAddInterval.h:    static constexpr auto name = Transform::name;
decrypt.cpp:    static constexpr auto name = "decrypt";
FunctionBitTestMany.h:    static constexpr auto name = Name::name;
convertCharset.cpp:    static constexpr auto name = "convert_charset";
monthName.cpp:    static constexpr auto name = "month_name";
getServerPort.cpp:    static constexpr auto name = "get_server_port";
now64.cpp:    static constexpr auto name = "now64";
FunctionsStringSearch.h:    static constexpr auto name = Impl::name;
toNullable.cpp:    static constexpr auto name = "to_nullable";
position.cpp:    static constexpr auto name = "position";
multiply.cpp:struct NameMultiply { static constexpr auto name = "multiply"; };
globalVariable.cpp:    static constexpr auto name = "global_variable";
bitShiftRight.cpp:struct NameBitShiftRight { static constexpr auto name = "bit_shift_right"; };
jumpConsistentHash.cpp:    static constexpr auto name = "jump_consistent_hash";
FunctionsTonalityClassification.cpp:    static constexpr auto name = "detect_tonality";
h3IsPentagon.cpp:    static constexpr auto name = "h3_is_pentagon";
visitParamExtractBool.cpp:struct NameVisitParamExtractBool   { static constexpr auto name = "visit_param_extract_bool"; };
visitParamExtractBool.cpp:struct NameSimpleJSONExtractBool   { static constexpr auto name = "simple_json_extract_bool"; };
toTypeName.cpp:    static constexpr auto name = "to_type_name";
h3ToCenterChild.cpp:        static constexpr auto name = "h3_to_center_child";
greatest.cpp:struct NameGreatest { static constexpr auto name = "greatest"; };
isNull.cpp:    static constexpr auto name = "is_null";
bitBoolMaskAnd.cpp:struct NameBitBoolMaskAnd { static constexpr auto name = "__bit_bool_mask_and"; };
FunctionCustomWeekToSomething.h:    static constexpr auto name = Transform::name;
log1p.cpp:        static constexpr auto name = "log1p";
s2RectUnion.cpp:    static constexpr auto name = "s2_rect_union";
fromModifiedJulianDay.cpp:        static constexpr auto name = Name::name;
fromModifiedJulianDay.cpp:        static constexpr auto name = "from_modified_julian_day";
fromModifiedJulianDay.cpp:        static constexpr auto name = "from_modified_julian_day_or_null";
dateDiff.cpp:    static constexpr auto name = "date_diff";
encodeXMLComponent.cpp:        static constexpr auto name = "encode_xml_component";
identity.cpp:    static constexpr auto name = "identity";
neighbor.cpp:    static constexpr auto name = "neighbor";
extractTextFromHTML.cpp:    static constexpr auto name = "extract_text_from_html";
reverse.cpp:    static constexpr auto name = "reverse";
reverse.cpp:    static constexpr auto name = "reverse";
ifNotFinite.cpp:    static constexpr auto name = "if_not_finite";
Streaming/FunctionsStreamingWindow.cpp:    static constexpr auto name = "__tumble";
Streaming/FunctionsStreamingWindow.cpp:    static constexpr auto name = "__hop";
Streaming/FunctionsStreamingWindow.h:    static constexpr auto name = "unknown";
Streaming/FunctionsStreamingWindow.h:    static constexpr auto name = WindowImpl<type>::name;
Streaming/StreamingNow.cpp:    static constexpr auto name = "__streaming_now";
hypot.cpp:        static constexpr auto name = "hypot";
MultiSearchFirstPositionImpl.h:    static constexpr auto name = Name::name;
bitOr.cpp:struct NameBitOr { static constexpr auto name = "bit_or"; };
lowerUTF8.cpp:    static constexpr auto name = "lower_utf8";
multiSearchFirstPositionCaseInsensitiveUTF8.cpp:    static constexpr auto name = "multi_search_first_position_case_insensitive_utf8";
URL/cutQueryString.cpp:struct NameCutQueryString { static constexpr auto name = "cut_query_string"; };
formatRow.cpp:    static constexpr auto name = no_newline ? "formatRowNoNewline" : "formatRow";
formatRow.cpp:    static constexpr auto name = no_newline ? "formatRowNoNewline" : "formatRow";
bitRotateLeft.cpp:struct NameBitRotateLeft { static constexpr auto name = "bit_rotate_left"; };
URL/cutToFirstSignificantSubdomainCustom.cpp:struct NameCutToFirstSignificantSubdomainCustom { static constexpr auto name = "cut_to_first_significant_subdomain_custom"; };
URL/cutToFirstSignificantSubdomainCustom.cpp:struct NameCutToFirstSignificantSubdomainCustomWithWWW { static constexpr auto name = "cut_to_first_significant_subdomain_custom_with_www"; };
multiSearchAnyCaseInsensitive.cpp:    static constexpr auto name = "multi_search_any_case_insensitive";
countDigits.cpp:    static constexpr auto name = "count_digits";
URL/pathFull.cpp:struct NamePathFull { static constexpr auto name = "path_full"; };
URL/extractURLParameterNames.cpp:    static constexpr auto name = "extract_url_parameter_names";
URL/extractURLParameterNames.cpp:struct NameExtractURLParameterNames { static constexpr auto name = "extract_url_parameter_names"; };
extractAllGroups.h:    static constexpr auto name = Impl::Name;
URL/extractURLParameter.cpp:struct NameExtractURLParameter { static constexpr auto name = "extract_url_parameter"; };
URL/cutQueryStringAndFragment.cpp:struct NameCutQueryStringAndFragment { static constexpr auto name = "cut_query_string_and_fragment"; };
URL/path.cpp:struct NamePath { static constexpr auto name = "path"; };
URL/cutWWW.cpp:struct NameCutWWW { static constexpr auto name = "cut_www"; };
URL/URLPathHierarchy.cpp:    static constexpr auto name = "url_hierarchy";
URL/URLPathHierarchy.cpp:struct NameURLHierarchy { static constexpr auto name = "urlh_ierarchy"; };
URL/topLevelDomain.cpp:struct NameTopLevelDomain { static constexpr auto name = "top_level_domain"; };
URL/queryString.cpp:struct NameQueryString { static constexpr auto name = "query_string"; };
URL/domain.cpp:struct NameDomain { static constexpr auto name = "domain"; };
URL/cutToFirstSignificantSubdomain.cpp:struct NameCutToFirstSignificantSubdomain { static constexpr auto name = "cut_to_first_significant_subdomain"; };
URL/cutToFirstSignificantSubdomain.cpp:struct NameCutToFirstSignificantSubdomainWithWWW { static constexpr auto name = "cut_to_first_significant_subdomain_with_www"; };
URL/FirstSignificantSubdomainCustomImpl.h:    static constexpr auto name = Name::name;
URL/URLHierarchy.cpp:    static constexpr auto name = "urlp_ath_hierarchy";
URL/URLHierarchy.cpp:struct NameURLPathHierarchy { static constexpr auto name = "urlp_ath_hierarchy"; };
URL/port.cpp:    static constexpr auto name = "port";
URL/domainWithoutWWW.cpp:struct NameDomainWithoutWWW { static constexpr auto name = "domain_without_www"; };
URL/firstSignificantSubdomainCustom.cpp:struct NameFirstSignificantSubdomainCustom { static constexpr auto name = "first_significant_subdomain_custom"; };
URL/netloc.cpp:struct NameNetloc { static constexpr auto name = "netloc"; };
URL/decodeURLComponent.cpp:struct NameDecodeURLComponent { static constexpr auto name = "decode_url_component"; };
URL/decodeURLComponent.cpp:struct NameDecodeURLFormComponent { static constexpr auto name = "decode_url_form_component"; };
URL/protocol.cpp:struct NameProtocol { static constexpr auto name = "protocol"; };
URL/cutFragment.cpp:struct NameCutFragment { static constexpr auto name = "cut_fragment"; };
URL/firstSignificantSubdomain.cpp:struct NameFirstSignificantSubdomain { static constexpr auto name = "first_significant_subdomain"; };
randConstant.cpp:    static constexpr auto name = Name::name;
randConstant.cpp:struct NameRandConstant { static constexpr auto name = "rand_constant"; };
URL/basename.cpp:struct NameBasename { static constexpr auto name = "basename"; };
URL/cutURLParameter.cpp:struct NameCutURLParameter { static constexpr auto name = "cut_urlp_arameter"; };
URL/queryStringAndFragment.cpp:struct NameQueryStringAndFragment { static constexpr auto name = "query_string_and_fragment"; };
URL/fragment.cpp:struct NameFragment { static constexpr auto name = "fragment"; };
URL/extractURLParameters.cpp:    static constexpr auto name = "extract_urlp_arameters";
URL/extractURLParameters.cpp:struct NameExtractURLParameters { static constexpr auto name = "extract_urlp_arameters"; };
